// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.OperationHopeUser
 * @header lbServices.OperationHopeUser
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `OperationHopeUser` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "OperationHopeUser",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/OperationHopeUsers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__findById__accessTokens
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__destroyById__accessTokens
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__findById__roles
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Find a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "prototype$__findById__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/roles/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__destroyById__roles
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Delete a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/roles/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__updateById__roles
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Update a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "prototype$__updateById__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/roles/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.findById() instead.
            "prototype$__findById__assessmentScores": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores/:fk",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.destroyById() instead.
            "prototype$__destroyById__assessmentScores": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.updateById() instead.
            "prototype$__updateById__assessmentScores": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.findById() instead.
            "prototype$__findById__userRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userRecords/:fk",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.destroyById() instead.
            "prototype$__destroyById__userRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userRecords/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.updateById() instead.
            "prototype$__updateById__userRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userRecords/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.findById() instead.
            "prototype$__findById__userNotes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userNotes/:fk",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.destroyById() instead.
            "prototype$__destroyById__userNotes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userNotes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.updateById() instead.
            "prototype$__updateById__userNotes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userNotes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress.destroyById() instead.
            "prototype$__destroyById__lessonsProgress": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress.updateById() instead.
            "prototype$__updateById__lessonsProgress": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress.destroyById() instead.
            "prototype$__destroyById__activitiesProgress": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress.updateById() instead.
            "prototype$__updateById__activitiesProgress": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.achievements.link() instead.
            "prototype$__link__achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/achievements/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.achievements.unlink() instead.
            "prototype$__unlink__achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/achievements/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.achievements.exists() instead.
            "prototype$__exists__achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/achievements/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.findById() instead.
            "prototype$__findById__userVideosWatched": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched/:fk",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.destroyById() instead.
            "prototype$__destroyById__userVideosWatched": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.updateById() instead.
            "prototype$__updateById__userVideosWatched": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__delete__accessTokens
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/OperationHopeUsers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__count__accessTokens
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Counts accessTokens of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/OperationHopeUsers/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__get__roles
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Queries roles of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "prototype$__get__roles": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/roles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__create__roles
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Creates a new instance in roles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "prototype$__create__roles": {
              url: urlBase + "/OperationHopeUsers/:id/roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__delete__roles
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Deletes all roles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__roles": {
              url: urlBase + "/OperationHopeUsers/:id/roles",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$__count__roles
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Counts roles of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__roles": {
              url: urlBase + "/OperationHopeUsers/:id/roles/count",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores() instead.
            "prototype$__get__assessmentScores": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.create() instead.
            "prototype$__create__assessmentScores": {
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.destroyAll() instead.
            "prototype$__delete__assessmentScores": {
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.count() instead.
            "prototype$__count__assessmentScores": {
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores/count",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userRecords() instead.
            "prototype$__get__userRecords": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/userRecords",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.create() instead.
            "prototype$__create__userRecords": {
              url: urlBase + "/OperationHopeUsers/:id/userRecords",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.destroyAll() instead.
            "prototype$__delete__userRecords": {
              url: urlBase + "/OperationHopeUsers/:id/userRecords",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.count() instead.
            "prototype$__count__userRecords": {
              url: urlBase + "/OperationHopeUsers/:id/userRecords/count",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userNotes() instead.
            "prototype$__get__userNotes": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/userNotes",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.create() instead.
            "prototype$__create__userNotes": {
              url: urlBase + "/OperationHopeUsers/:id/userNotes",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.destroyAll() instead.
            "prototype$__delete__userNotes": {
              url: urlBase + "/OperationHopeUsers/:id/userNotes",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.count() instead.
            "prototype$__count__userNotes": {
              url: urlBase + "/OperationHopeUsers/:id/userNotes/count",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress() instead.
            "prototype$__get__lessonsProgress": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress.create() instead.
            "prototype$__create__lessonsProgress": {
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress.count() instead.
            "prototype$__count__lessonsProgress": {
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress/count",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress() instead.
            "prototype$__get__activitiesProgress": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress.create() instead.
            "prototype$__create__activitiesProgress": {
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress.count() instead.
            "prototype$__count__activitiesProgress": {
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress/count",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.achievements() instead.
            "prototype$__get__achievements": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/achievements",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.achievements.count() instead.
            "prototype$__count__achievements": {
              url: urlBase + "/OperationHopeUsers/:id/achievements/count",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched() instead.
            "prototype$__get__userVideosWatched": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.create() instead.
            "prototype$__create__userVideosWatched": {
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.destroyAll() instead.
            "prototype$__delete__userVideosWatched": {
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.count() instead.
            "prototype$__count__userVideosWatched": {
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#create
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/OperationHopeUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#createMany
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#upsert
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/OperationHopeUsers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#replaceOrCreate
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/OperationHopeUsers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#exists
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/OperationHopeUsers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#findById
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/OperationHopeUsers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#find
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#findOne
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/OperationHopeUsers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#updateAll
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/OperationHopeUsers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#deleteById
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/OperationHopeUsers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#count
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/OperationHopeUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#prototype$updateAttributes
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/OperationHopeUsers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#createChangeStream
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/OperationHopeUsers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#login
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/OperationHopeUsers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#logout
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/OperationHopeUsers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#confirm
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/OperationHopeUsers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#resetPassword
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/OperationHopeUsers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#createAdmin
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Creates a admin, can only be called by a admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `email` – `{string}` -
             *
             *  - `username` – `{string}` -
             *
             *  - `firstName` – `{string=}` -
             *
             *  - `lastName` – `{string=}` -
             *
             *  - `gender` – `{string=}` -
             *
             *  - `zipCode` – `{string=}` -
             *
             *  - `birthDate` – `{date=}` -
             *
             *  - `credentials` – `{object=}` -
             *
             *  - `challenges` – `{object=}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "createAdmin": {
              url: urlBase + "/OperationHopeUsers/admin",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#chapterProgress
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Gets the progress of this user on a chapter
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{number}` -
             *
             *  - `chapterId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "chapterProgress": {
              url: urlBase + "/OperationHopeUsers/:id/chapterProgress/:chapterId",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#completedStartAssessment
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Returns if the user has completed there start assessment for this chapter
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{number}` -
             *
             *  - `chapterId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "completedStartAssessment": {
              url: urlBase + "/OperationHopeUsers/:id/completedStartAssessment/:chapterId",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#getUsersByRole
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Gets users by roles
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `role` – `{string}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "getUsersByRole": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/getUsersByRole",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#hasWatchedVideo
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Gets if the user has watched a video
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{number}` -
             *
             *  - `videoId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "hasWatchedVideo": {
              url: urlBase + "/OperationHopeUsers/:id/hasWatchedVideo/:videoId",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#completedExitAssessment
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Returns if the user has completed there exit assessment for this chapter
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{number}` -
             *
             *  - `chapterId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
            "completedExitAssessment": {
              url: urlBase + "/OperationHopeUsers/:id/completedExitAssessment/:chapterId",
              method: "GET",
            },

            // INTERNAL. Use Video.operationHopeUser() instead.
            "::get::Video::operationHopeUser": {
              url: urlBase + "/Videos/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use AssessmentScore.operationHopeUser() instead.
            "::get::AssessmentScore::operationHopeUser": {
              url: urlBase + "/AssessmentScores/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use UserRecord.operationHopeUser() instead.
            "::get::UserRecord::operationHopeUser": {
              url: urlBase + "/UserRecords/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use UserNote.operationHopeUser() instead.
            "::get::UserNote::operationHopeUser": {
              url: urlBase + "/UserNotes/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use Achievement.operationHopeUser.findById() instead.
            "::findById::Achievement::operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/:fk",
              method: "GET",
            },

            // INTERNAL. Use Achievement.operationHopeUser.destroyById() instead.
            "::destroyById::Achievement::operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Achievement.operationHopeUser.updateById() instead.
            "::updateById::Achievement::operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Achievement.operationHopeUser.link() instead.
            "::link::Achievement::operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Achievement.operationHopeUser.unlink() instead.
            "::unlink::Achievement::operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Achievement.operationHopeUser.exists() instead.
            "::exists::Achievement::operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Achievement.operationHopeUser() instead.
            "::get::Achievement::operationHopeUser": {
              isArray: true,
              url: urlBase + "/Achievements/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use Achievement.operationHopeUser.create() instead.
            "::create::Achievement::operationHopeUser": {
              url: urlBase + "/Achievements/:id/operationHopeUser",
              method: "POST",
            },

            // INTERNAL. Use Achievement.operationHopeUser.createMany() instead.
            "::createMany::Achievement::operationHopeUser": {
              isArray: true,
              url: urlBase + "/Achievements/:id/operationHopeUser",
              method: "POST",
            },

            // INTERNAL. Use Achievement.operationHopeUser.destroyAll() instead.
            "::delete::Achievement::operationHopeUser": {
              url: urlBase + "/Achievements/:id/operationHopeUser",
              method: "DELETE",
            },

            // INTERNAL. Use Achievement.operationHopeUser.count() instead.
            "::count::Achievement::operationHopeUser": {
              url: urlBase + "/Achievements/:id/operationHopeUser/count",
              method: "GET",
            },

            // INTERNAL. Use LessonProgress.operationHopeUser() instead.
            "::get::LessonProgress::operationHopeUser": {
              url: urlBase + "/LessonProgresses/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use ActivityProgress.operationHopeUser() instead.
            "::get::ActivityProgress::operationHopeUser": {
              url: urlBase + "/ActivityProgresses/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use UserVideoWatched.operationHopeUser() instead.
            "::get::UserVideoWatched::operationHopeUser": {
              url: urlBase + "/UserVideoWatcheds/:id/operationHopeUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#getCurrent
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/OperationHopeUsers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#patchOrCreate
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#updateOrCreate
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#update
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#destroyById
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#removeById
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#patchAttributes
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.OperationHopeUser#getCachedCurrent
         * @methodOf lbServices.OperationHopeUser
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.OperationHopeUser#login} or
         * {@link lbServices.OperationHopeUser#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A OperationHopeUser instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.OperationHopeUser#isAuthenticated
         * @methodOf lbServices.OperationHopeUser
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.OperationHopeUser#getCurrentId
         * @methodOf lbServices.OperationHopeUser
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.OperationHopeUser#modelName
        * @propertyOf lbServices.OperationHopeUser
        * @description
        * The name of the model represented by this $resource,
        * i.e. `OperationHopeUser`.
        */
        R.modelName = "OperationHopeUser";

    /**
     * @ngdoc object
     * @name lbServices.OperationHopeUser.assessmentScores
     * @header lbServices.OperationHopeUser.assessmentScores
     * @object
     * @description
     *
     * The object `OperationHopeUser.assessmentScores` groups methods
     * manipulating `AssessmentScore` instances related to `OperationHopeUser`.
     *
     * Call {@link lbServices.OperationHopeUser#assessmentScores OperationHopeUser.assessmentScores()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#assessmentScores
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Queries assessmentScores of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R.assessmentScores = function() {
          var TargetResource = $injector.get("AssessmentScore");
          var action = TargetResource["::get::OperationHopeUser::assessmentScores"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.assessmentScores#count
             * @methodOf lbServices.OperationHopeUser.assessmentScores
             *
             * @description
             *
             * Counts assessmentScores of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.assessmentScores.count = function() {
          var TargetResource = $injector.get("AssessmentScore");
          var action = TargetResource["::count::OperationHopeUser::assessmentScores"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.assessmentScores#create
             * @methodOf lbServices.OperationHopeUser.assessmentScores
             *
             * @description
             *
             * Creates a new instance in assessmentScores of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R.assessmentScores.create = function() {
          var TargetResource = $injector.get("AssessmentScore");
          var action = TargetResource["::create::OperationHopeUser::assessmentScores"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.assessmentScores#createMany
             * @methodOf lbServices.OperationHopeUser.assessmentScores
             *
             * @description
             *
             * Creates a new instance in assessmentScores of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R.assessmentScores.createMany = function() {
          var TargetResource = $injector.get("AssessmentScore");
          var action = TargetResource["::createMany::OperationHopeUser::assessmentScores"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.assessmentScores#destroyAll
             * @methodOf lbServices.OperationHopeUser.assessmentScores
             *
             * @description
             *
             * Deletes all assessmentScores of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assessmentScores.destroyAll = function() {
          var TargetResource = $injector.get("AssessmentScore");
          var action = TargetResource["::delete::OperationHopeUser::assessmentScores"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.assessmentScores#destroyById
             * @methodOf lbServices.OperationHopeUser.assessmentScores
             *
             * @description
             *
             * Delete a related item by id for assessmentScores.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for assessmentScores
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assessmentScores.destroyById = function() {
          var TargetResource = $injector.get("AssessmentScore");
          var action = TargetResource["::destroyById::OperationHopeUser::assessmentScores"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.assessmentScores#findById
             * @methodOf lbServices.OperationHopeUser.assessmentScores
             *
             * @description
             *
             * Find a related item by id for assessmentScores.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for assessmentScores
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R.assessmentScores.findById = function() {
          var TargetResource = $injector.get("AssessmentScore");
          var action = TargetResource["::findById::OperationHopeUser::assessmentScores"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.assessmentScores#updateById
             * @methodOf lbServices.OperationHopeUser.assessmentScores
             *
             * @description
             *
             * Update a related item by id for assessmentScores.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for assessmentScores
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R.assessmentScores.updateById = function() {
          var TargetResource = $injector.get("AssessmentScore");
          var action = TargetResource["::updateById::OperationHopeUser::assessmentScores"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.OperationHopeUser.userRecords
     * @header lbServices.OperationHopeUser.userRecords
     * @object
     * @description
     *
     * The object `OperationHopeUser.userRecords` groups methods
     * manipulating `UserRecord` instances related to `OperationHopeUser`.
     *
     * Call {@link lbServices.OperationHopeUser#userRecords OperationHopeUser.userRecords()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#userRecords
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Queries userRecords of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R.userRecords = function() {
          var TargetResource = $injector.get("UserRecord");
          var action = TargetResource["::get::OperationHopeUser::userRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userRecords#count
             * @methodOf lbServices.OperationHopeUser.userRecords
             *
             * @description
             *
             * Counts userRecords of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.userRecords.count = function() {
          var TargetResource = $injector.get("UserRecord");
          var action = TargetResource["::count::OperationHopeUser::userRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userRecords#create
             * @methodOf lbServices.OperationHopeUser.userRecords
             *
             * @description
             *
             * Creates a new instance in userRecords of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R.userRecords.create = function() {
          var TargetResource = $injector.get("UserRecord");
          var action = TargetResource["::create::OperationHopeUser::userRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userRecords#createMany
             * @methodOf lbServices.OperationHopeUser.userRecords
             *
             * @description
             *
             * Creates a new instance in userRecords of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R.userRecords.createMany = function() {
          var TargetResource = $injector.get("UserRecord");
          var action = TargetResource["::createMany::OperationHopeUser::userRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userRecords#destroyAll
             * @methodOf lbServices.OperationHopeUser.userRecords
             *
             * @description
             *
             * Deletes all userRecords of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.userRecords.destroyAll = function() {
          var TargetResource = $injector.get("UserRecord");
          var action = TargetResource["::delete::OperationHopeUser::userRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userRecords#destroyById
             * @methodOf lbServices.OperationHopeUser.userRecords
             *
             * @description
             *
             * Delete a related item by id for userRecords.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for userRecords
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.userRecords.destroyById = function() {
          var TargetResource = $injector.get("UserRecord");
          var action = TargetResource["::destroyById::OperationHopeUser::userRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userRecords#findById
             * @methodOf lbServices.OperationHopeUser.userRecords
             *
             * @description
             *
             * Find a related item by id for userRecords.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for userRecords
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R.userRecords.findById = function() {
          var TargetResource = $injector.get("UserRecord");
          var action = TargetResource["::findById::OperationHopeUser::userRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userRecords#updateById
             * @methodOf lbServices.OperationHopeUser.userRecords
             *
             * @description
             *
             * Update a related item by id for userRecords.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for userRecords
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R.userRecords.updateById = function() {
          var TargetResource = $injector.get("UserRecord");
          var action = TargetResource["::updateById::OperationHopeUser::userRecords"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.OperationHopeUser.userNotes
     * @header lbServices.OperationHopeUser.userNotes
     * @object
     * @description
     *
     * The object `OperationHopeUser.userNotes` groups methods
     * manipulating `UserNote` instances related to `OperationHopeUser`.
     *
     * Call {@link lbServices.OperationHopeUser#userNotes OperationHopeUser.userNotes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#userNotes
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Queries userNotes of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R.userNotes = function() {
          var TargetResource = $injector.get("UserNote");
          var action = TargetResource["::get::OperationHopeUser::userNotes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userNotes#count
             * @methodOf lbServices.OperationHopeUser.userNotes
             *
             * @description
             *
             * Counts userNotes of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.userNotes.count = function() {
          var TargetResource = $injector.get("UserNote");
          var action = TargetResource["::count::OperationHopeUser::userNotes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userNotes#create
             * @methodOf lbServices.OperationHopeUser.userNotes
             *
             * @description
             *
             * Creates a new instance in userNotes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R.userNotes.create = function() {
          var TargetResource = $injector.get("UserNote");
          var action = TargetResource["::create::OperationHopeUser::userNotes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userNotes#createMany
             * @methodOf lbServices.OperationHopeUser.userNotes
             *
             * @description
             *
             * Creates a new instance in userNotes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R.userNotes.createMany = function() {
          var TargetResource = $injector.get("UserNote");
          var action = TargetResource["::createMany::OperationHopeUser::userNotes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userNotes#destroyAll
             * @methodOf lbServices.OperationHopeUser.userNotes
             *
             * @description
             *
             * Deletes all userNotes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.userNotes.destroyAll = function() {
          var TargetResource = $injector.get("UserNote");
          var action = TargetResource["::delete::OperationHopeUser::userNotes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userNotes#destroyById
             * @methodOf lbServices.OperationHopeUser.userNotes
             *
             * @description
             *
             * Delete a related item by id for userNotes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for userNotes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.userNotes.destroyById = function() {
          var TargetResource = $injector.get("UserNote");
          var action = TargetResource["::destroyById::OperationHopeUser::userNotes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userNotes#findById
             * @methodOf lbServices.OperationHopeUser.userNotes
             *
             * @description
             *
             * Find a related item by id for userNotes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for userNotes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R.userNotes.findById = function() {
          var TargetResource = $injector.get("UserNote");
          var action = TargetResource["::findById::OperationHopeUser::userNotes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userNotes#updateById
             * @methodOf lbServices.OperationHopeUser.userNotes
             *
             * @description
             *
             * Update a related item by id for userNotes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for userNotes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R.userNotes.updateById = function() {
          var TargetResource = $injector.get("UserNote");
          var action = TargetResource["::updateById::OperationHopeUser::userNotes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.OperationHopeUser.lessonsProgress
     * @header lbServices.OperationHopeUser.lessonsProgress
     * @object
     * @description
     *
     * The object `OperationHopeUser.lessonsProgress` groups methods
     * manipulating `LessonProgress` instances related to `OperationHopeUser`.
     *
     * Call {@link lbServices.OperationHopeUser#lessonsProgress OperationHopeUser.lessonsProgress()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#lessonsProgress
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Queries lessonsProgress of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
        R.lessonsProgress = function() {
          var TargetResource = $injector.get("LessonProgress");
          var action = TargetResource["::get::OperationHopeUser::lessonsProgress"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.lessonsProgress#count
             * @methodOf lbServices.OperationHopeUser.lessonsProgress
             *
             * @description
             *
             * Counts lessonsProgress of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.lessonsProgress.count = function() {
          var TargetResource = $injector.get("LessonProgress");
          var action = TargetResource["::count::OperationHopeUser::lessonsProgress"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.lessonsProgress#create
             * @methodOf lbServices.OperationHopeUser.lessonsProgress
             *
             * @description
             *
             * Creates a new instance in lessonsProgress of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
        R.lessonsProgress.create = function() {
          var TargetResource = $injector.get("LessonProgress");
          var action = TargetResource["::create::OperationHopeUser::lessonsProgress"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.lessonsProgress#createMany
             * @methodOf lbServices.OperationHopeUser.lessonsProgress
             *
             * @description
             *
             * Creates a new instance in lessonsProgress of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
        R.lessonsProgress.createMany = function() {
          var TargetResource = $injector.get("LessonProgress");
          var action = TargetResource["::createMany::OperationHopeUser::lessonsProgress"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.lessonsProgress#destroyById
             * @methodOf lbServices.OperationHopeUser.lessonsProgress
             *
             * @description
             *
             * Delete a related item by id for lessonsProgress.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for lessonsProgress
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.lessonsProgress.destroyById = function() {
          var TargetResource = $injector.get("LessonProgress");
          var action = TargetResource["::destroyById::OperationHopeUser::lessonsProgress"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.lessonsProgress#updateById
             * @methodOf lbServices.OperationHopeUser.lessonsProgress
             *
             * @description
             *
             * Update a related item by id for lessonsProgress.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for lessonsProgress
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
        R.lessonsProgress.updateById = function() {
          var TargetResource = $injector.get("LessonProgress");
          var action = TargetResource["::updateById::OperationHopeUser::lessonsProgress"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.OperationHopeUser.activitiesProgress
     * @header lbServices.OperationHopeUser.activitiesProgress
     * @object
     * @description
     *
     * The object `OperationHopeUser.activitiesProgress` groups methods
     * manipulating `ActivityProgress` instances related to `OperationHopeUser`.
     *
     * Call {@link lbServices.OperationHopeUser#activitiesProgress OperationHopeUser.activitiesProgress()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#activitiesProgress
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Queries activitiesProgress of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
        R.activitiesProgress = function() {
          var TargetResource = $injector.get("ActivityProgress");
          var action = TargetResource["::get::OperationHopeUser::activitiesProgress"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.activitiesProgress#count
             * @methodOf lbServices.OperationHopeUser.activitiesProgress
             *
             * @description
             *
             * Counts activitiesProgress of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.activitiesProgress.count = function() {
          var TargetResource = $injector.get("ActivityProgress");
          var action = TargetResource["::count::OperationHopeUser::activitiesProgress"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.activitiesProgress#create
             * @methodOf lbServices.OperationHopeUser.activitiesProgress
             *
             * @description
             *
             * Creates a new instance in activitiesProgress of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
        R.activitiesProgress.create = function() {
          var TargetResource = $injector.get("ActivityProgress");
          var action = TargetResource["::create::OperationHopeUser::activitiesProgress"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.activitiesProgress#createMany
             * @methodOf lbServices.OperationHopeUser.activitiesProgress
             *
             * @description
             *
             * Creates a new instance in activitiesProgress of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
        R.activitiesProgress.createMany = function() {
          var TargetResource = $injector.get("ActivityProgress");
          var action = TargetResource["::createMany::OperationHopeUser::activitiesProgress"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.activitiesProgress#destroyById
             * @methodOf lbServices.OperationHopeUser.activitiesProgress
             *
             * @description
             *
             * Delete a related item by id for activitiesProgress.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for activitiesProgress
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.activitiesProgress.destroyById = function() {
          var TargetResource = $injector.get("ActivityProgress");
          var action = TargetResource["::destroyById::OperationHopeUser::activitiesProgress"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.activitiesProgress#updateById
             * @methodOf lbServices.OperationHopeUser.activitiesProgress
             *
             * @description
             *
             * Update a related item by id for activitiesProgress.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for activitiesProgress
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
        R.activitiesProgress.updateById = function() {
          var TargetResource = $injector.get("ActivityProgress");
          var action = TargetResource["::updateById::OperationHopeUser::activitiesProgress"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.OperationHopeUser.achievements
     * @header lbServices.OperationHopeUser.achievements
     * @object
     * @description
     *
     * The object `OperationHopeUser.achievements` groups methods
     * manipulating `Achievement` instances related to `OperationHopeUser`.
     *
     * Call {@link lbServices.OperationHopeUser#achievements OperationHopeUser.achievements()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#achievements
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Queries achievements of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R.achievements = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::get::OperationHopeUser::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.achievements#count
             * @methodOf lbServices.OperationHopeUser.achievements
             *
             * @description
             *
             * Counts achievements of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.achievements.count = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::count::OperationHopeUser::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.achievements#exists
             * @methodOf lbServices.OperationHopeUser.achievements
             *
             * @description
             *
             * Check the existence of achievements relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for achievements
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R.achievements.exists = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::exists::OperationHopeUser::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.achievements#link
             * @methodOf lbServices.OperationHopeUser.achievements
             *
             * @description
             *
             * Add a related item by id for achievements.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for achievements
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R.achievements.link = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::link::OperationHopeUser::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.achievements#unlink
             * @methodOf lbServices.OperationHopeUser.achievements
             *
             * @description
             *
             * Remove the achievements relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for achievements
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.achievements.unlink = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::unlink::OperationHopeUser::achievements"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.OperationHopeUser.userVideosWatched
     * @header lbServices.OperationHopeUser.userVideosWatched
     * @object
     * @description
     *
     * The object `OperationHopeUser.userVideosWatched` groups methods
     * manipulating `UserVideoWatched` instances related to `OperationHopeUser`.
     *
     * Call {@link lbServices.OperationHopeUser#userVideosWatched OperationHopeUser.userVideosWatched()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser#userVideosWatched
             * @methodOf lbServices.OperationHopeUser
             *
             * @description
             *
             * Queries userVideosWatched of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R.userVideosWatched = function() {
          var TargetResource = $injector.get("UserVideoWatched");
          var action = TargetResource["::get::OperationHopeUser::userVideosWatched"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userVideosWatched#count
             * @methodOf lbServices.OperationHopeUser.userVideosWatched
             *
             * @description
             *
             * Counts userVideosWatched of OperationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.userVideosWatched.count = function() {
          var TargetResource = $injector.get("UserVideoWatched");
          var action = TargetResource["::count::OperationHopeUser::userVideosWatched"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userVideosWatched#create
             * @methodOf lbServices.OperationHopeUser.userVideosWatched
             *
             * @description
             *
             * Creates a new instance in userVideosWatched of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R.userVideosWatched.create = function() {
          var TargetResource = $injector.get("UserVideoWatched");
          var action = TargetResource["::create::OperationHopeUser::userVideosWatched"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userVideosWatched#createMany
             * @methodOf lbServices.OperationHopeUser.userVideosWatched
             *
             * @description
             *
             * Creates a new instance in userVideosWatched of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R.userVideosWatched.createMany = function() {
          var TargetResource = $injector.get("UserVideoWatched");
          var action = TargetResource["::createMany::OperationHopeUser::userVideosWatched"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userVideosWatched#destroyAll
             * @methodOf lbServices.OperationHopeUser.userVideosWatched
             *
             * @description
             *
             * Deletes all userVideosWatched of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.userVideosWatched.destroyAll = function() {
          var TargetResource = $injector.get("UserVideoWatched");
          var action = TargetResource["::delete::OperationHopeUser::userVideosWatched"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userVideosWatched#destroyById
             * @methodOf lbServices.OperationHopeUser.userVideosWatched
             *
             * @description
             *
             * Delete a related item by id for userVideosWatched.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for userVideosWatched
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.userVideosWatched.destroyById = function() {
          var TargetResource = $injector.get("UserVideoWatched");
          var action = TargetResource["::destroyById::OperationHopeUser::userVideosWatched"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userVideosWatched#findById
             * @methodOf lbServices.OperationHopeUser.userVideosWatched
             *
             * @description
             *
             * Find a related item by id for userVideosWatched.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for userVideosWatched
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R.userVideosWatched.findById = function() {
          var TargetResource = $injector.get("UserVideoWatched");
          var action = TargetResource["::findById::OperationHopeUser::userVideosWatched"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.OperationHopeUser.userVideosWatched#updateById
             * @methodOf lbServices.OperationHopeUser.userVideosWatched
             *
             * @description
             *
             * Update a related item by id for userVideosWatched.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - OperationHopeUser id
             *
             *  - `fk` – `{*}` - Foreign key for userVideosWatched
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R.userVideosWatched.updateById = function() {
          var TargetResource = $injector.get("UserVideoWatched");
          var action = TargetResource["::updateById::OperationHopeUser::userVideosWatched"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Curriculum
 * @header lbServices.Curriculum
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Curriculum` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Curriculum",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Curriculums/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Curriculum.chapters.findById() instead.
            "prototype$__findById__chapters": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/chapters/:fk",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.chapters.destroyById() instead.
            "prototype$__destroyById__chapters": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/chapters/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.chapters.updateById() instead.
            "prototype$__updateById__chapters": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/chapters/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Curriculum.entity() instead.
            "prototype$__get__entity": {
              url: urlBase + "/Curriculums/:id/entity",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.certificate() instead.
            "prototype$__get__certificate": {
              url: urlBase + "/Curriculums/:id/certificate",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.certificate.create() instead.
            "prototype$__create__certificate": {
              url: urlBase + "/Curriculums/:id/certificate",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.certificate.update() instead.
            "prototype$__update__certificate": {
              url: urlBase + "/Curriculums/:id/certificate",
              method: "PUT",
            },

            // INTERNAL. Use Curriculum.certificate.destroy() instead.
            "prototype$__destroy__certificate": {
              url: urlBase + "/Curriculums/:id/certificate",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.deliverables.findById() instead.
            "prototype$__findById__deliverables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/deliverables/:fk",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.deliverables.destroyById() instead.
            "prototype$__destroyById__deliverables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/deliverables/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.deliverables.updateById() instead.
            "prototype$__updateById__deliverables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/deliverables/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Curriculum.heroImages.findById() instead.
            "prototype$__findById__heroImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/heroImages/:fk",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.heroImages.destroyById() instead.
            "prototype$__destroyById__heroImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/heroImages/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.heroImages.updateById() instead.
            "prototype$__updateById__heroImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/heroImages/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Curriculum.chapters() instead.
            "prototype$__get__chapters": {
              isArray: true,
              url: urlBase + "/Curriculums/:id/chapters",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.chapters.create() instead.
            "prototype$__create__chapters": {
              url: urlBase + "/Curriculums/:id/chapters",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.chapters.destroyAll() instead.
            "prototype$__delete__chapters": {
              url: urlBase + "/Curriculums/:id/chapters",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.chapters.count() instead.
            "prototype$__count__chapters": {
              url: urlBase + "/Curriculums/:id/chapters/count",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.deliverables() instead.
            "prototype$__get__deliverables": {
              isArray: true,
              url: urlBase + "/Curriculums/:id/deliverables",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.deliverables.create() instead.
            "prototype$__create__deliverables": {
              url: urlBase + "/Curriculums/:id/deliverables",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.deliverables.destroyAll() instead.
            "prototype$__delete__deliverables": {
              url: urlBase + "/Curriculums/:id/deliverables",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.deliverables.count() instead.
            "prototype$__count__deliverables": {
              url: urlBase + "/Curriculums/:id/deliverables/count",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.heroImages() instead.
            "prototype$__get__heroImages": {
              isArray: true,
              url: urlBase + "/Curriculums/:id/heroImages",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.heroImages.create() instead.
            "prototype$__create__heroImages": {
              url: urlBase + "/Curriculums/:id/heroImages",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.heroImages.destroyAll() instead.
            "prototype$__delete__heroImages": {
              url: urlBase + "/Curriculums/:id/heroImages",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.heroImages.count() instead.
            "prototype$__count__heroImages": {
              url: urlBase + "/Curriculums/:id/heroImages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#create
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Curriculums",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#createMany
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Curriculums",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#upsert
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Curriculums",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#replaceOrCreate
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Curriculums/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#upsertWithWhere
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Curriculums/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#exists
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Curriculums/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#findById
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Curriculums/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#replaceById
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Curriculums/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#find
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Curriculums",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#findOne
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Curriculums/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#updateAll
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Curriculums/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#deleteById
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Curriculums/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#count
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Curriculums/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#prototype$updateAttributes
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Curriculums/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#createChangeStream
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Curriculums/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#adminDashboard
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Returns all system curriculums with additional data for admin dashboard.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
            "adminDashboard": {
              isArray: true,
              url: urlBase + "/Curriculums/adminDashboard",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#lessonCount
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * returns a count of all lesson within Curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{number}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "lessonCount": {
              url: urlBase + "/Curriculums/lessonCount",
              method: "GET",
            },

            // INTERNAL. Use Chapter.curriculum() instead.
            "::get::Chapter::curriculum": {
              url: urlBase + "/Chapters/:id/curriculum",
              method: "GET",
            },

            // INTERNAL. Use Entity.Curriculums.findById() instead.
            "::findById::Entity::Curriculums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/Curriculums/:fk",
              method: "GET",
            },

            // INTERNAL. Use Entity.Curriculums.destroyById() instead.
            "::destroyById::Entity::Curriculums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/Curriculums/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Entity.Curriculums.updateById() instead.
            "::updateById::Entity::Curriculums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/Curriculums/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Entity.Curriculums() instead.
            "::get::Entity::Curriculums": {
              isArray: true,
              url: urlBase + "/Entities/:id/Curriculums",
              method: "GET",
            },

            // INTERNAL. Use Entity.Curriculums.create() instead.
            "::create::Entity::Curriculums": {
              url: urlBase + "/Entities/:id/Curriculums",
              method: "POST",
            },

            // INTERNAL. Use Entity.Curriculums.createMany() instead.
            "::createMany::Entity::Curriculums": {
              isArray: true,
              url: urlBase + "/Entities/:id/Curriculums",
              method: "POST",
            },

            // INTERNAL. Use Entity.Curriculums.destroyAll() instead.
            "::delete::Entity::Curriculums": {
              url: urlBase + "/Entities/:id/Curriculums",
              method: "DELETE",
            },

            // INTERNAL. Use Entity.Curriculums.count() instead.
            "::count::Entity::Curriculums": {
              url: urlBase + "/Entities/:id/Curriculums/count",
              method: "GET",
            },

            // INTERNAL. Use Video.curriculum() instead.
            "::get::Video::curriculum": {
              url: urlBase + "/Videos/:id/curriculum",
              method: "GET",
            },

            // INTERNAL. Use UserRecord.curriculum() instead.
            "::get::UserRecord::curriculum": {
              url: urlBase + "/UserRecords/:id/curriculum",
              method: "GET",
            },

            // INTERNAL. Use UserNote.curriculum() instead.
            "::get::UserNote::curriculum": {
              url: urlBase + "/UserNotes/:id/curriculum",
              method: "GET",
            },

            // INTERNAL. Use Deliverable.curriculum() instead.
            "::get::Deliverable::curriculum": {
              url: urlBase + "/Deliverables/:id/curriculum",
              method: "GET",
            },

            // INTERNAL. Use HeroImage.curriculum() instead.
            "::get::HeroImage::curriculum": {
              url: urlBase + "/HeroImages/:id/curriculum",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Curriculum#patchOrCreate
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#updateOrCreate
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#patchOrCreateWithWhere
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#update
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#destroyById
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#removeById
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#patchAttributes
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Curriculum#modelName
        * @propertyOf lbServices.Curriculum
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Curriculum`.
        */
        R.modelName = "Curriculum";

    /**
     * @ngdoc object
     * @name lbServices.Curriculum.chapters
     * @header lbServices.Curriculum.chapters
     * @object
     * @description
     *
     * The object `Curriculum.chapters` groups methods
     * manipulating `Chapter` instances related to `Curriculum`.
     *
     * Call {@link lbServices.Curriculum#chapters Curriculum.chapters()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Curriculum#chapters
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Queries chapters of Curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapters = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::get::Curriculum::chapters"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.chapters#count
             * @methodOf lbServices.Curriculum.chapters
             *
             * @description
             *
             * Counts chapters of Curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.chapters.count = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::count::Curriculum::chapters"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.chapters#create
             * @methodOf lbServices.Curriculum.chapters
             *
             * @description
             *
             * Creates a new instance in chapters of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapters.create = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::create::Curriculum::chapters"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.chapters#createMany
             * @methodOf lbServices.Curriculum.chapters
             *
             * @description
             *
             * Creates a new instance in chapters of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapters.createMany = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::createMany::Curriculum::chapters"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.chapters#destroyAll
             * @methodOf lbServices.Curriculum.chapters
             *
             * @description
             *
             * Deletes all chapters of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.chapters.destroyAll = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::delete::Curriculum::chapters"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.chapters#destroyById
             * @methodOf lbServices.Curriculum.chapters
             *
             * @description
             *
             * Delete a related item by id for chapters.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `fk` – `{*}` - Foreign key for chapters
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.chapters.destroyById = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::destroyById::Curriculum::chapters"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.chapters#findById
             * @methodOf lbServices.Curriculum.chapters
             *
             * @description
             *
             * Find a related item by id for chapters.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `fk` – `{*}` - Foreign key for chapters
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapters.findById = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::findById::Curriculum::chapters"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.chapters#updateById
             * @methodOf lbServices.Curriculum.chapters
             *
             * @description
             *
             * Update a related item by id for chapters.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `fk` – `{*}` - Foreign key for chapters
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapters.updateById = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::updateById::Curriculum::chapters"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum#entity
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Fetches belongsTo relation entity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
        R.entity = function() {
          var TargetResource = $injector.get("Entity");
          var action = TargetResource["::get::Curriculum::entity"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Curriculum.certificate
     * @header lbServices.Curriculum.certificate
     * @object
     * @description
     *
     * The object `Curriculum.certificate` groups methods
     * manipulating `Deliverable` instances related to `Curriculum`.
     *
     * Call {@link lbServices.Curriculum#certificate Curriculum.certificate()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Curriculum#certificate
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Fetches hasOne relation certificate.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R.certificate = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::get::Curriculum::certificate"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.certificate#create
             * @methodOf lbServices.Curriculum.certificate
             *
             * @description
             *
             * Creates a new instance in certificate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R.certificate.create = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::create::Curriculum::certificate"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.certificate#createMany
             * @methodOf lbServices.Curriculum.certificate
             *
             * @description
             *
             * Creates a new instance in certificate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R.certificate.createMany = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::createMany::Curriculum::certificate"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.certificate#destroy
             * @methodOf lbServices.Curriculum.certificate
             *
             * @description
             *
             * Deletes certificate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.certificate.destroy = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::destroy::Curriculum::certificate"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.certificate#update
             * @methodOf lbServices.Curriculum.certificate
             *
             * @description
             *
             * Update certificate of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R.certificate.update = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::update::Curriculum::certificate"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Curriculum.deliverables
     * @header lbServices.Curriculum.deliverables
     * @object
     * @description
     *
     * The object `Curriculum.deliverables` groups methods
     * manipulating `Deliverable` instances related to `Curriculum`.
     *
     * Call {@link lbServices.Curriculum#deliverables Curriculum.deliverables()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Curriculum#deliverables
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Queries deliverables of Curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R.deliverables = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::get::Curriculum::deliverables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.deliverables#count
             * @methodOf lbServices.Curriculum.deliverables
             *
             * @description
             *
             * Counts deliverables of Curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.deliverables.count = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::count::Curriculum::deliverables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.deliverables#create
             * @methodOf lbServices.Curriculum.deliverables
             *
             * @description
             *
             * Creates a new instance in deliverables of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R.deliverables.create = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::create::Curriculum::deliverables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.deliverables#createMany
             * @methodOf lbServices.Curriculum.deliverables
             *
             * @description
             *
             * Creates a new instance in deliverables of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R.deliverables.createMany = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::createMany::Curriculum::deliverables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.deliverables#destroyAll
             * @methodOf lbServices.Curriculum.deliverables
             *
             * @description
             *
             * Deletes all deliverables of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.deliverables.destroyAll = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::delete::Curriculum::deliverables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.deliverables#destroyById
             * @methodOf lbServices.Curriculum.deliverables
             *
             * @description
             *
             * Delete a related item by id for deliverables.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `fk` – `{*}` - Foreign key for deliverables
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.deliverables.destroyById = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::destroyById::Curriculum::deliverables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.deliverables#findById
             * @methodOf lbServices.Curriculum.deliverables
             *
             * @description
             *
             * Find a related item by id for deliverables.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `fk` – `{*}` - Foreign key for deliverables
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R.deliverables.findById = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::findById::Curriculum::deliverables"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.deliverables#updateById
             * @methodOf lbServices.Curriculum.deliverables
             *
             * @description
             *
             * Update a related item by id for deliverables.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `fk` – `{*}` - Foreign key for deliverables
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R.deliverables.updateById = function() {
          var TargetResource = $injector.get("Deliverable");
          var action = TargetResource["::updateById::Curriculum::deliverables"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Curriculum.heroImages
     * @header lbServices.Curriculum.heroImages
     * @object
     * @description
     *
     * The object `Curriculum.heroImages` groups methods
     * manipulating `HeroImage` instances related to `Curriculum`.
     *
     * Call {@link lbServices.Curriculum#heroImages Curriculum.heroImages()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Curriculum#heroImages
             * @methodOf lbServices.Curriculum
             *
             * @description
             *
             * Queries heroImages of Curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R.heroImages = function() {
          var TargetResource = $injector.get("HeroImage");
          var action = TargetResource["::get::Curriculum::heroImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.heroImages#count
             * @methodOf lbServices.Curriculum.heroImages
             *
             * @description
             *
             * Counts heroImages of Curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.heroImages.count = function() {
          var TargetResource = $injector.get("HeroImage");
          var action = TargetResource["::count::Curriculum::heroImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.heroImages#create
             * @methodOf lbServices.Curriculum.heroImages
             *
             * @description
             *
             * Creates a new instance in heroImages of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R.heroImages.create = function() {
          var TargetResource = $injector.get("HeroImage");
          var action = TargetResource["::create::Curriculum::heroImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.heroImages#createMany
             * @methodOf lbServices.Curriculum.heroImages
             *
             * @description
             *
             * Creates a new instance in heroImages of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R.heroImages.createMany = function() {
          var TargetResource = $injector.get("HeroImage");
          var action = TargetResource["::createMany::Curriculum::heroImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.heroImages#destroyAll
             * @methodOf lbServices.Curriculum.heroImages
             *
             * @description
             *
             * Deletes all heroImages of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.heroImages.destroyAll = function() {
          var TargetResource = $injector.get("HeroImage");
          var action = TargetResource["::delete::Curriculum::heroImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.heroImages#destroyById
             * @methodOf lbServices.Curriculum.heroImages
             *
             * @description
             *
             * Delete a related item by id for heroImages.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `fk` – `{*}` - Foreign key for heroImages
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.heroImages.destroyById = function() {
          var TargetResource = $injector.get("HeroImage");
          var action = TargetResource["::destroyById::Curriculum::heroImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.heroImages#findById
             * @methodOf lbServices.Curriculum.heroImages
             *
             * @description
             *
             * Find a related item by id for heroImages.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `fk` – `{*}` - Foreign key for heroImages
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R.heroImages.findById = function() {
          var TargetResource = $injector.get("HeroImage");
          var action = TargetResource["::findById::Curriculum::heroImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Curriculum.heroImages#updateById
             * @methodOf lbServices.Curriculum.heroImages
             *
             * @description
             *
             * Update a related item by id for heroImages.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Curriculum id
             *
             *  - `fk` – `{*}` - Foreign key for heroImages
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R.heroImages.updateById = function() {
          var TargetResource = $injector.get("HeroImage");
          var action = TargetResource["::updateById::Curriculum::heroImages"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Chapter
 * @header lbServices.Chapter
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Chapter` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Chapter",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Chapters/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Chapter.curriculum() instead.
            "prototype$__get__curriculum": {
              url: urlBase + "/Chapters/:id/curriculum",
              method: "GET",
            },

            // INTERNAL. Use Chapter.lessons.findById() instead.
            "prototype$__findById__lessons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/lessons/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chapter.lessons.destroyById() instead.
            "prototype$__destroyById__lessons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/lessons/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.lessons.updateById() instead.
            "prototype$__updateById__lessons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/lessons/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.activities.findById() instead.
            "prototype$__findById__activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/activities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chapter.activities.destroyById() instead.
            "prototype$__destroyById__activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/activities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.activities.updateById() instead.
            "prototype$__updateById__activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/activities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.videos.findById() instead.
            "prototype$__findById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/videos/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chapter.videos.destroyById() instead.
            "prototype$__destroyById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/videos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.videos.updateById() instead.
            "prototype$__updateById__videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/videos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.assessments.findById() instead.
            "prototype$__findById__assessments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/assessments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chapter.assessments.destroyById() instead.
            "prototype$__destroyById__assessments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/assessments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.assessments.updateById() instead.
            "prototype$__updateById__assessments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/assessments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.achievements.findById() instead.
            "prototype$__findById__achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/achievements/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chapter.achievements.destroyById() instead.
            "prototype$__destroyById__achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/achievements/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.achievements.updateById() instead.
            "prototype$__updateById__achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/achievements/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.lessons() instead.
            "prototype$__get__lessons": {
              isArray: true,
              url: urlBase + "/Chapters/:id/lessons",
              method: "GET",
            },

            // INTERNAL. Use Chapter.lessons.create() instead.
            "prototype$__create__lessons": {
              url: urlBase + "/Chapters/:id/lessons",
              method: "POST",
            },

            // INTERNAL. Use Chapter.lessons.destroyAll() instead.
            "prototype$__delete__lessons": {
              url: urlBase + "/Chapters/:id/lessons",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.lessons.count() instead.
            "prototype$__count__lessons": {
              url: urlBase + "/Chapters/:id/lessons/count",
              method: "GET",
            },

            // INTERNAL. Use Chapter.activities() instead.
            "prototype$__get__activities": {
              isArray: true,
              url: urlBase + "/Chapters/:id/activities",
              method: "GET",
            },

            // INTERNAL. Use Chapter.activities.create() instead.
            "prototype$__create__activities": {
              url: urlBase + "/Chapters/:id/activities",
              method: "POST",
            },

            // INTERNAL. Use Chapter.activities.destroyAll() instead.
            "prototype$__delete__activities": {
              url: urlBase + "/Chapters/:id/activities",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.activities.count() instead.
            "prototype$__count__activities": {
              url: urlBase + "/Chapters/:id/activities/count",
              method: "GET",
            },

            // INTERNAL. Use Chapter.videos() instead.
            "prototype$__get__videos": {
              isArray: true,
              url: urlBase + "/Chapters/:id/videos",
              method: "GET",
            },

            // INTERNAL. Use Chapter.videos.create() instead.
            "prototype$__create__videos": {
              url: urlBase + "/Chapters/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use Chapter.videos.destroyAll() instead.
            "prototype$__delete__videos": {
              url: urlBase + "/Chapters/:id/videos",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.videos.count() instead.
            "prototype$__count__videos": {
              url: urlBase + "/Chapters/:id/videos/count",
              method: "GET",
            },

            // INTERNAL. Use Chapter.assessments() instead.
            "prototype$__get__assessments": {
              isArray: true,
              url: urlBase + "/Chapters/:id/assessments",
              method: "GET",
            },

            // INTERNAL. Use Chapter.assessments.create() instead.
            "prototype$__create__assessments": {
              url: urlBase + "/Chapters/:id/assessments",
              method: "POST",
            },

            // INTERNAL. Use Chapter.assessments.destroyAll() instead.
            "prototype$__delete__assessments": {
              url: urlBase + "/Chapters/:id/assessments",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.assessments.count() instead.
            "prototype$__count__assessments": {
              url: urlBase + "/Chapters/:id/assessments/count",
              method: "GET",
            },

            // INTERNAL. Use Chapter.achievements() instead.
            "prototype$__get__achievements": {
              isArray: true,
              url: urlBase + "/Chapters/:id/achievements",
              method: "GET",
            },

            // INTERNAL. Use Chapter.achievements.create() instead.
            "prototype$__create__achievements": {
              url: urlBase + "/Chapters/:id/achievements",
              method: "POST",
            },

            // INTERNAL. Use Chapter.achievements.destroyAll() instead.
            "prototype$__delete__achievements": {
              url: urlBase + "/Chapters/:id/achievements",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.achievements.count() instead.
            "prototype$__count__achievements": {
              url: urlBase + "/Chapters/:id/achievements/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#create
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Chapters",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#createMany
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Chapters",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#upsert
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Chapters",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#replaceOrCreate
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Chapters/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#upsertWithWhere
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Chapters/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#exists
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Chapters/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#findById
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Chapters/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#replaceById
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Chapters/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#find
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Chapters",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#findOne
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Chapters/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#updateAll
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Chapters/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#deleteById
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Chapters/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#count
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Chapters/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#prototype$updateAttributes
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Chapters/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#createChangeStream
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Chapters/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#uploadCover
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Adds cover files to the chapter content folder
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `type` – `{string}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `fileDir` – `{string=}` -
             */
            "uploadCover": {
              url: urlBase + "/Chapters/:id/upload/cover/:type",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Chapter#introVideo
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Gets the chapters intro video if it has one
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{number}` -
             *
             *  - `language` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
            "introVideo": {
              url: urlBase + "/Chapters/:id/introVideo",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.chapters.findById() instead.
            "::findById::Curriculum::chapters": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/chapters/:fk",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.chapters.destroyById() instead.
            "::destroyById::Curriculum::chapters": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/chapters/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.chapters.updateById() instead.
            "::updateById::Curriculum::chapters": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/chapters/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Curriculum.chapters() instead.
            "::get::Curriculum::chapters": {
              isArray: true,
              url: urlBase + "/Curriculums/:id/chapters",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.chapters.create() instead.
            "::create::Curriculum::chapters": {
              url: urlBase + "/Curriculums/:id/chapters",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.chapters.createMany() instead.
            "::createMany::Curriculum::chapters": {
              isArray: true,
              url: urlBase + "/Curriculums/:id/chapters",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.chapters.destroyAll() instead.
            "::delete::Curriculum::chapters": {
              url: urlBase + "/Curriculums/:id/chapters",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.chapters.count() instead.
            "::count::Curriculum::chapters": {
              url: urlBase + "/Curriculums/:id/chapters/count",
              method: "GET",
            },

            // INTERNAL. Use Lesson.chapter() instead.
            "::get::Lesson::chapter": {
              url: urlBase + "/Lessons/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use Activity.chapter() instead.
            "::get::Activity::chapter": {
              url: urlBase + "/Activities/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use Video.chapter() instead.
            "::get::Video::chapter": {
              url: urlBase + "/Videos/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use Assessment.chapter() instead.
            "::get::Assessment::chapter": {
              url: urlBase + "/Assessments/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use UserRecord.chapter() instead.
            "::get::UserRecord::chapter": {
              url: urlBase + "/UserRecords/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use UserNote.chapter() instead.
            "::get::UserNote::chapter": {
              url: urlBase + "/UserNotes/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use Achievement.chapter() instead.
            "::get::Achievement::chapter": {
              url: urlBase + "/Achievements/:id/chapter",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Chapter#patchOrCreate
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Chapter#updateOrCreate
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Chapter#patchOrCreateWithWhere
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Chapter#update
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Chapter#destroyById
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Chapter#removeById
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Chapter#patchAttributes
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Chapter#modelName
        * @propertyOf lbServices.Chapter
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Chapter`.
        */
        R.modelName = "Chapter";


            /**
             * @ngdoc method
             * @name lbServices.Chapter#curriculum
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Fetches belongsTo relation curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.curriculum = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::get::Chapter::curriculum"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Chapter.lessons
     * @header lbServices.Chapter.lessons
     * @object
     * @description
     *
     * The object `Chapter.lessons` groups methods
     * manipulating `Lesson` instances related to `Chapter`.
     *
     * Call {@link lbServices.Chapter#lessons Chapter.lessons()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Chapter#lessons
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Queries lessons of Chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R.lessons = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::get::Chapter::lessons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.lessons#count
             * @methodOf lbServices.Chapter.lessons
             *
             * @description
             *
             * Counts lessons of Chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.lessons.count = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::count::Chapter::lessons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.lessons#create
             * @methodOf lbServices.Chapter.lessons
             *
             * @description
             *
             * Creates a new instance in lessons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R.lessons.create = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::create::Chapter::lessons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.lessons#createMany
             * @methodOf lbServices.Chapter.lessons
             *
             * @description
             *
             * Creates a new instance in lessons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R.lessons.createMany = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::createMany::Chapter::lessons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.lessons#destroyAll
             * @methodOf lbServices.Chapter.lessons
             *
             * @description
             *
             * Deletes all lessons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.lessons.destroyAll = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::delete::Chapter::lessons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.lessons#destroyById
             * @methodOf lbServices.Chapter.lessons
             *
             * @description
             *
             * Delete a related item by id for lessons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for lessons
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.lessons.destroyById = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::destroyById::Chapter::lessons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.lessons#findById
             * @methodOf lbServices.Chapter.lessons
             *
             * @description
             *
             * Find a related item by id for lessons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for lessons
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R.lessons.findById = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::findById::Chapter::lessons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.lessons#updateById
             * @methodOf lbServices.Chapter.lessons
             *
             * @description
             *
             * Update a related item by id for lessons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for lessons
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R.lessons.updateById = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::updateById::Chapter::lessons"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Chapter.activities
     * @header lbServices.Chapter.activities
     * @object
     * @description
     *
     * The object `Chapter.activities` groups methods
     * manipulating `Activity` instances related to `Chapter`.
     *
     * Call {@link lbServices.Chapter#activities Chapter.activities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Chapter#activities
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Queries activities of Chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activities = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::get::Chapter::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.activities#count
             * @methodOf lbServices.Chapter.activities
             *
             * @description
             *
             * Counts activities of Chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.activities.count = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::count::Chapter::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.activities#create
             * @methodOf lbServices.Chapter.activities
             *
             * @description
             *
             * Creates a new instance in activities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activities.create = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::create::Chapter::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.activities#createMany
             * @methodOf lbServices.Chapter.activities
             *
             * @description
             *
             * Creates a new instance in activities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activities.createMany = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::createMany::Chapter::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.activities#destroyAll
             * @methodOf lbServices.Chapter.activities
             *
             * @description
             *
             * Deletes all activities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.activities.destroyAll = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::delete::Chapter::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.activities#destroyById
             * @methodOf lbServices.Chapter.activities
             *
             * @description
             *
             * Delete a related item by id for activities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for activities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.activities.destroyById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::destroyById::Chapter::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.activities#findById
             * @methodOf lbServices.Chapter.activities
             *
             * @description
             *
             * Find a related item by id for activities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for activities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activities.findById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::findById::Chapter::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.activities#updateById
             * @methodOf lbServices.Chapter.activities
             *
             * @description
             *
             * Update a related item by id for activities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for activities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activities.updateById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::updateById::Chapter::activities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Chapter.videos
     * @header lbServices.Chapter.videos
     * @object
     * @description
     *
     * The object `Chapter.videos` groups methods
     * manipulating `Video` instances related to `Chapter`.
     *
     * Call {@link lbServices.Chapter#videos Chapter.videos()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Chapter#videos
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Queries videos of Chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R.videos = function() {
          var TargetResource = $injector.get("Video");
          var action = TargetResource["::get::Chapter::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.videos#count
             * @methodOf lbServices.Chapter.videos
             *
             * @description
             *
             * Counts videos of Chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.videos.count = function() {
          var TargetResource = $injector.get("Video");
          var action = TargetResource["::count::Chapter::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.videos#create
             * @methodOf lbServices.Chapter.videos
             *
             * @description
             *
             * Creates a new instance in videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R.videos.create = function() {
          var TargetResource = $injector.get("Video");
          var action = TargetResource["::create::Chapter::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.videos#createMany
             * @methodOf lbServices.Chapter.videos
             *
             * @description
             *
             * Creates a new instance in videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R.videos.createMany = function() {
          var TargetResource = $injector.get("Video");
          var action = TargetResource["::createMany::Chapter::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.videos#destroyAll
             * @methodOf lbServices.Chapter.videos
             *
             * @description
             *
             * Deletes all videos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.videos.destroyAll = function() {
          var TargetResource = $injector.get("Video");
          var action = TargetResource["::delete::Chapter::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.videos#destroyById
             * @methodOf lbServices.Chapter.videos
             *
             * @description
             *
             * Delete a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.videos.destroyById = function() {
          var TargetResource = $injector.get("Video");
          var action = TargetResource["::destroyById::Chapter::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.videos#findById
             * @methodOf lbServices.Chapter.videos
             *
             * @description
             *
             * Find a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R.videos.findById = function() {
          var TargetResource = $injector.get("Video");
          var action = TargetResource["::findById::Chapter::videos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.videos#updateById
             * @methodOf lbServices.Chapter.videos
             *
             * @description
             *
             * Update a related item by id for videos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for videos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R.videos.updateById = function() {
          var TargetResource = $injector.get("Video");
          var action = TargetResource["::updateById::Chapter::videos"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Chapter.assessments
     * @header lbServices.Chapter.assessments
     * @object
     * @description
     *
     * The object `Chapter.assessments` groups methods
     * manipulating `Assessment` instances related to `Chapter`.
     *
     * Call {@link lbServices.Chapter#assessments Chapter.assessments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Chapter#assessments
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Queries assessments of Chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R.assessments = function() {
          var TargetResource = $injector.get("Assessment");
          var action = TargetResource["::get::Chapter::assessments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.assessments#count
             * @methodOf lbServices.Chapter.assessments
             *
             * @description
             *
             * Counts assessments of Chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.assessments.count = function() {
          var TargetResource = $injector.get("Assessment");
          var action = TargetResource["::count::Chapter::assessments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.assessments#create
             * @methodOf lbServices.Chapter.assessments
             *
             * @description
             *
             * Creates a new instance in assessments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R.assessments.create = function() {
          var TargetResource = $injector.get("Assessment");
          var action = TargetResource["::create::Chapter::assessments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.assessments#createMany
             * @methodOf lbServices.Chapter.assessments
             *
             * @description
             *
             * Creates a new instance in assessments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R.assessments.createMany = function() {
          var TargetResource = $injector.get("Assessment");
          var action = TargetResource["::createMany::Chapter::assessments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.assessments#destroyAll
             * @methodOf lbServices.Chapter.assessments
             *
             * @description
             *
             * Deletes all assessments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assessments.destroyAll = function() {
          var TargetResource = $injector.get("Assessment");
          var action = TargetResource["::delete::Chapter::assessments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.assessments#destroyById
             * @methodOf lbServices.Chapter.assessments
             *
             * @description
             *
             * Delete a related item by id for assessments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for assessments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.assessments.destroyById = function() {
          var TargetResource = $injector.get("Assessment");
          var action = TargetResource["::destroyById::Chapter::assessments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.assessments#findById
             * @methodOf lbServices.Chapter.assessments
             *
             * @description
             *
             * Find a related item by id for assessments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for assessments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R.assessments.findById = function() {
          var TargetResource = $injector.get("Assessment");
          var action = TargetResource["::findById::Chapter::assessments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.assessments#updateById
             * @methodOf lbServices.Chapter.assessments
             *
             * @description
             *
             * Update a related item by id for assessments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for assessments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R.assessments.updateById = function() {
          var TargetResource = $injector.get("Assessment");
          var action = TargetResource["::updateById::Chapter::assessments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Chapter.achievements
     * @header lbServices.Chapter.achievements
     * @object
     * @description
     *
     * The object `Chapter.achievements` groups methods
     * manipulating `Achievement` instances related to `Chapter`.
     *
     * Call {@link lbServices.Chapter#achievements Chapter.achievements()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Chapter#achievements
             * @methodOf lbServices.Chapter
             *
             * @description
             *
             * Queries achievements of Chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R.achievements = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::get::Chapter::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.achievements#count
             * @methodOf lbServices.Chapter.achievements
             *
             * @description
             *
             * Counts achievements of Chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.achievements.count = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::count::Chapter::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.achievements#create
             * @methodOf lbServices.Chapter.achievements
             *
             * @description
             *
             * Creates a new instance in achievements of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R.achievements.create = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::create::Chapter::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.achievements#createMany
             * @methodOf lbServices.Chapter.achievements
             *
             * @description
             *
             * Creates a new instance in achievements of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R.achievements.createMany = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::createMany::Chapter::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.achievements#destroyAll
             * @methodOf lbServices.Chapter.achievements
             *
             * @description
             *
             * Deletes all achievements of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.achievements.destroyAll = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::delete::Chapter::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.achievements#destroyById
             * @methodOf lbServices.Chapter.achievements
             *
             * @description
             *
             * Delete a related item by id for achievements.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for achievements
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.achievements.destroyById = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::destroyById::Chapter::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.achievements#findById
             * @methodOf lbServices.Chapter.achievements
             *
             * @description
             *
             * Find a related item by id for achievements.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for achievements
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R.achievements.findById = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::findById::Chapter::achievements"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Chapter.achievements#updateById
             * @methodOf lbServices.Chapter.achievements
             *
             * @description
             *
             * Update a related item by id for achievements.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Chapter id
             *
             *  - `fk` – `{*}` - Foreign key for achievements
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R.achievements.updateById = function() {
          var TargetResource = $injector.get("Achievement");
          var action = TargetResource["::updateById::Chapter::achievements"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Lesson
 * @header lbServices.Lesson
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Lesson` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Lesson",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Lessons/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Lesson.chapter() instead.
            "prototype$__get__chapter": {
              url: urlBase + "/Lessons/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use Lesson.activities.findById() instead.
            "prototype$__findById__activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Lessons/:id/activities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Lesson.activities.destroyById() instead.
            "prototype$__destroyById__activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Lessons/:id/activities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Lesson.activities.updateById() instead.
            "prototype$__updateById__activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Lessons/:id/activities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Lesson.activities() instead.
            "prototype$__get__activities": {
              isArray: true,
              url: urlBase + "/Lessons/:id/activities",
              method: "GET",
            },

            // INTERNAL. Use Lesson.activities.create() instead.
            "prototype$__create__activities": {
              url: urlBase + "/Lessons/:id/activities",
              method: "POST",
            },

            // INTERNAL. Use Lesson.activities.destroyAll() instead.
            "prototype$__delete__activities": {
              url: urlBase + "/Lessons/:id/activities",
              method: "DELETE",
            },

            // INTERNAL. Use Lesson.activities.count() instead.
            "prototype$__count__activities": {
              url: urlBase + "/Lessons/:id/activities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#create
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Lessons",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#createMany
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Lessons",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#upsert
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Lessons",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#replaceOrCreate
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Lessons/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#upsertWithWhere
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Lessons/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#exists
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Lessons/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#findById
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Lessons/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#replaceById
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Lessons/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#find
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Lessons",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#findOne
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Lessons/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#updateAll
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Lessons/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#deleteById
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Lessons/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#count
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Lessons/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#prototype$updateAttributes
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Lessons/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#createChangeStream
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Lessons/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#removeContentFile
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Removes a specfic file from our content folder
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `key` – `{string}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
            "removeContentFile": {
              url: urlBase + "/Lessons/:id/removeFile",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#uploadLanguageFiles
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Adds lesson files to the lesson
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `fileDirs` – `{*=}` -
             */
            "uploadLanguageFiles": {
              url: urlBase + "/Lessons/:id/uploadLanguageFiles",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#folder
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Manpulate the folder using a action
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `action` – `{string}` -
             *
             *  - `path` – `{string}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `ETag` – `{string=}` -
             */
            "folder": {
              url: urlBase + "/Lessons/:id/folder",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#uploadPost
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Creates a hash for uploading a files to the correct lesson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `hash` – `{string=}` -
             */
            "uploadPost": {
              url: urlBase + "/Lessons/:id/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Lesson#uploadPut
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Moves the lesson files to the correct folder using the provided hash.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `hash` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `hash` – `{string=}` -
             */
            "uploadPut": {
              url: urlBase + "/Lessons/:id/upload",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.lessons.findById() instead.
            "::findById::Chapter::lessons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/lessons/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chapter.lessons.destroyById() instead.
            "::destroyById::Chapter::lessons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/lessons/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.lessons.updateById() instead.
            "::updateById::Chapter::lessons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/lessons/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.lessons() instead.
            "::get::Chapter::lessons": {
              isArray: true,
              url: urlBase + "/Chapters/:id/lessons",
              method: "GET",
            },

            // INTERNAL. Use Chapter.lessons.create() instead.
            "::create::Chapter::lessons": {
              url: urlBase + "/Chapters/:id/lessons",
              method: "POST",
            },

            // INTERNAL. Use Chapter.lessons.createMany() instead.
            "::createMany::Chapter::lessons": {
              isArray: true,
              url: urlBase + "/Chapters/:id/lessons",
              method: "POST",
            },

            // INTERNAL. Use Chapter.lessons.destroyAll() instead.
            "::delete::Chapter::lessons": {
              url: urlBase + "/Chapters/:id/lessons",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.lessons.count() instead.
            "::count::Chapter::lessons": {
              url: urlBase + "/Chapters/:id/lessons/count",
              method: "GET",
            },

            // INTERNAL. Use Activity.lesson() instead.
            "::get::Activity::lesson": {
              url: urlBase + "/Activities/:id/lesson",
              method: "GET",
            },

            // INTERNAL. Use UserRecord.lesson() instead.
            "::get::UserRecord::lesson": {
              url: urlBase + "/UserRecords/:id/lesson",
              method: "GET",
            },

            // INTERNAL. Use UserNote.lesson() instead.
            "::get::UserNote::lesson": {
              url: urlBase + "/UserNotes/:id/lesson",
              method: "GET",
            },

            // INTERNAL. Use Achievement.lesson() instead.
            "::get::Achievement::lesson": {
              url: urlBase + "/Achievements/:id/lesson",
              method: "GET",
            },

            // INTERNAL. Use LessonProgress.lesson() instead.
            "::get::LessonProgress::lesson": {
              url: urlBase + "/LessonProgresses/:id/lesson",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Lesson#patchOrCreate
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Lesson#updateOrCreate
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Lesson#patchOrCreateWithWhere
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Lesson#update
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Lesson#destroyById
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Lesson#removeById
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Lesson#patchAttributes
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Lesson#modelName
        * @propertyOf lbServices.Lesson
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Lesson`.
        */
        R.modelName = "Lesson";


            /**
             * @ngdoc method
             * @name lbServices.Lesson#chapter
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Fetches belongsTo relation chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapter = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::get::Lesson::chapter"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Lesson.activities
     * @header lbServices.Lesson.activities
     * @object
     * @description
     *
     * The object `Lesson.activities` groups methods
     * manipulating `Activity` instances related to `Lesson`.
     *
     * Call {@link lbServices.Lesson#activities Lesson.activities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Lesson#activities
             * @methodOf lbServices.Lesson
             *
             * @description
             *
             * Queries activities of Lesson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activities = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::get::Lesson::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Lesson.activities#count
             * @methodOf lbServices.Lesson.activities
             *
             * @description
             *
             * Counts activities of Lesson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.activities.count = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::count::Lesson::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Lesson.activities#create
             * @methodOf lbServices.Lesson.activities
             *
             * @description
             *
             * Creates a new instance in activities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activities.create = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::create::Lesson::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Lesson.activities#createMany
             * @methodOf lbServices.Lesson.activities
             *
             * @description
             *
             * Creates a new instance in activities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activities.createMany = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::createMany::Lesson::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Lesson.activities#destroyAll
             * @methodOf lbServices.Lesson.activities
             *
             * @description
             *
             * Deletes all activities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.activities.destroyAll = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::delete::Lesson::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Lesson.activities#destroyById
             * @methodOf lbServices.Lesson.activities
             *
             * @description
             *
             * Delete a related item by id for activities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             *  - `fk` – `{*}` - Foreign key for activities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.activities.destroyById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::destroyById::Lesson::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Lesson.activities#findById
             * @methodOf lbServices.Lesson.activities
             *
             * @description
             *
             * Find a related item by id for activities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             *  - `fk` – `{*}` - Foreign key for activities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activities.findById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::findById::Lesson::activities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Lesson.activities#updateById
             * @methodOf lbServices.Lesson.activities
             *
             * @description
             *
             * Update a related item by id for activities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Lesson id
             *
             *  - `fk` – `{*}` - Foreign key for activities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activities.updateById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::updateById::Lesson::activities"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Entity
 * @header lbServices.Entity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Entity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Entity",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Entities/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Entity.Curriculums.findById() instead.
            "prototype$__findById__Curriculums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/Curriculums/:fk",
              method: "GET",
            },

            // INTERNAL. Use Entity.Curriculums.destroyById() instead.
            "prototype$__destroyById__Curriculums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/Curriculums/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Entity.Curriculums.updateById() instead.
            "prototype$__updateById__Curriculums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/Curriculums/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__findById__OperationHopeAdmins
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Find a related item by id for OperationHopeAdmins.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `fk` – `{*}` - Foreign key for OperationHopeAdmins
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "prototype$__findById__OperationHopeAdmins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/OperationHopeAdmins/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__destroyById__OperationHopeAdmins
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Delete a related item by id for OperationHopeAdmins.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `fk` – `{*}` - Foreign key for OperationHopeAdmins
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__OperationHopeAdmins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/OperationHopeAdmins/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__updateById__OperationHopeAdmins
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Update a related item by id for OperationHopeAdmins.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `fk` – `{*}` - Foreign key for OperationHopeAdmins
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "prototype$__updateById__OperationHopeAdmins": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/OperationHopeAdmins/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__findById__OperationHopeUsers
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Find a related item by id for OperationHopeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `fk` – `{*}` - Foreign key for OperationHopeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "prototype$__findById__OperationHopeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/OperationHopeUsers/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__destroyById__OperationHopeUsers
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Delete a related item by id for OperationHopeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `fk` – `{*}` - Foreign key for OperationHopeUsers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__OperationHopeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/OperationHopeUsers/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__updateById__OperationHopeUsers
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Update a related item by id for OperationHopeUsers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `fk` – `{*}` - Foreign key for OperationHopeUsers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "prototype$__updateById__OperationHopeUsers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Entities/:id/OperationHopeUsers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Entity.Curriculums() instead.
            "prototype$__get__Curriculums": {
              isArray: true,
              url: urlBase + "/Entities/:id/Curriculums",
              method: "GET",
            },

            // INTERNAL. Use Entity.Curriculums.create() instead.
            "prototype$__create__Curriculums": {
              url: urlBase + "/Entities/:id/Curriculums",
              method: "POST",
            },

            // INTERNAL. Use Entity.Curriculums.destroyAll() instead.
            "prototype$__delete__Curriculums": {
              url: urlBase + "/Entities/:id/Curriculums",
              method: "DELETE",
            },

            // INTERNAL. Use Entity.Curriculums.count() instead.
            "prototype$__count__Curriculums": {
              url: urlBase + "/Entities/:id/Curriculums/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__get__OperationHopeAdmins
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Queries OperationHopeAdmins of Entity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "prototype$__get__OperationHopeAdmins": {
              isArray: true,
              url: urlBase + "/Entities/:id/OperationHopeAdmins",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__create__OperationHopeAdmins
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Creates a new instance in OperationHopeAdmins of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "prototype$__create__OperationHopeAdmins": {
              url: urlBase + "/Entities/:id/OperationHopeAdmins",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__delete__OperationHopeAdmins
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Deletes all OperationHopeAdmins of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__OperationHopeAdmins": {
              url: urlBase + "/Entities/:id/OperationHopeAdmins",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__count__OperationHopeAdmins
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Counts OperationHopeAdmins of Entity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__OperationHopeAdmins": {
              url: urlBase + "/Entities/:id/OperationHopeAdmins/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__get__OperationHopeUsers
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Queries OperationHopeUsers of Entity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "prototype$__get__OperationHopeUsers": {
              isArray: true,
              url: urlBase + "/Entities/:id/OperationHopeUsers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__create__OperationHopeUsers
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Creates a new instance in OperationHopeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "prototype$__create__OperationHopeUsers": {
              url: urlBase + "/Entities/:id/OperationHopeUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__delete__OperationHopeUsers
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Deletes all OperationHopeUsers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__OperationHopeUsers": {
              url: urlBase + "/Entities/:id/OperationHopeUsers",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$__count__OperationHopeUsers
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Counts OperationHopeUsers of Entity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__OperationHopeUsers": {
              url: urlBase + "/Entities/:id/OperationHopeUsers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#create
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Entities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#createMany
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Entities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#upsert
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Entities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#replaceOrCreate
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Entities/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#upsertWithWhere
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Entities/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#exists
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Entities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#findById
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Entities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#replaceById
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Entities/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#find
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Entities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#findOne
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Entities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#updateAll
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Entities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#deleteById
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Entities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#count
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Entities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#prototype$updateAttributes
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Entities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Entity#createChangeStream
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Entities/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.entity() instead.
            "::get::Curriculum::entity": {
              url: urlBase + "/Curriculums/:id/entity",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Entity#patchOrCreate
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Entity#updateOrCreate
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Entity#patchOrCreateWithWhere
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Entity#update
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Entity#destroyById
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Entity#removeById
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Entity#patchAttributes
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Entity` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Entity#modelName
        * @propertyOf lbServices.Entity
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Entity`.
        */
        R.modelName = "Entity";

    /**
     * @ngdoc object
     * @name lbServices.Entity.Curriculums
     * @header lbServices.Entity.Curriculums
     * @object
     * @description
     *
     * The object `Entity.Curriculums` groups methods
     * manipulating `Curriculum` instances related to `Entity`.
     *
     * Call {@link lbServices.Entity#Curriculums Entity.Curriculums()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Entity#Curriculums
             * @methodOf lbServices.Entity
             *
             * @description
             *
             * Queries Curriculums of Entity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.Curriculums = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::get::Entity::Curriculums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Entity.Curriculums#count
             * @methodOf lbServices.Entity.Curriculums
             *
             * @description
             *
             * Counts Curriculums of Entity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.Curriculums.count = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::count::Entity::Curriculums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Entity.Curriculums#create
             * @methodOf lbServices.Entity.Curriculums
             *
             * @description
             *
             * Creates a new instance in Curriculums of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.Curriculums.create = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::create::Entity::Curriculums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Entity.Curriculums#createMany
             * @methodOf lbServices.Entity.Curriculums
             *
             * @description
             *
             * Creates a new instance in Curriculums of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.Curriculums.createMany = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::createMany::Entity::Curriculums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Entity.Curriculums#destroyAll
             * @methodOf lbServices.Entity.Curriculums
             *
             * @description
             *
             * Deletes all Curriculums of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.Curriculums.destroyAll = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::delete::Entity::Curriculums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Entity.Curriculums#destroyById
             * @methodOf lbServices.Entity.Curriculums
             *
             * @description
             *
             * Delete a related item by id for Curriculums.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `fk` – `{*}` - Foreign key for Curriculums
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.Curriculums.destroyById = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::destroyById::Entity::Curriculums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Entity.Curriculums#findById
             * @methodOf lbServices.Entity.Curriculums
             *
             * @description
             *
             * Find a related item by id for Curriculums.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `fk` – `{*}` - Foreign key for Curriculums
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.Curriculums.findById = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::findById::Entity::Curriculums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Entity.Curriculums#updateById
             * @methodOf lbServices.Entity.Curriculums
             *
             * @description
             *
             * Update a related item by id for Curriculums.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Entity id
             *
             *  - `fk` – `{*}` - Foreign key for Curriculums
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.Curriculums.updateById = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::updateById::Entity::Curriculums"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Activity
 * @header lbServices.Activity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Activity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Activity",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Activities/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Activity.chapter() instead.
            "prototype$__get__chapter": {
              url: urlBase + "/Activities/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use Activity.lesson() instead.
            "prototype$__get__lesson": {
              url: urlBase + "/Activities/:id/lesson",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#create
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Activities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#createMany
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Activities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#upsert
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Activities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#replaceOrCreate
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Activities/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#upsertWithWhere
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Activities/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#exists
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Activities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#findById
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Activities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#replaceById
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Activities/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#find
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Activities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#findOne
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Activities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#updateAll
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Activities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#deleteById
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Activities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#count
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Activities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#prototype$updateAttributes
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Activity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Activities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#createChangeStream
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Activities/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#folder
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Manpulate the folder using a action
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `action` – `{string}` -
             *
             *  - `path` – `{string}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `ETag` – `{string=}` -
             */
            "folder": {
              url: urlBase + "/Activities/:id/folder",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#uploadPost
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Creates a hash for uploading a files to the correct activity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `hash` – `{string=}` -
             */
            "uploadPost": {
              url: urlBase + "/Activities/:id/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Activity#uploadPut
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Moves the activity files to the correct folder using the provided hash.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `hash` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `hash` – `{string=}` -
             */
            "uploadPut": {
              url: urlBase + "/Activities/:id/upload",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.activities.findById() instead.
            "::findById::Chapter::activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/activities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chapter.activities.destroyById() instead.
            "::destroyById::Chapter::activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/activities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.activities.updateById() instead.
            "::updateById::Chapter::activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/activities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.activities() instead.
            "::get::Chapter::activities": {
              isArray: true,
              url: urlBase + "/Chapters/:id/activities",
              method: "GET",
            },

            // INTERNAL. Use Chapter.activities.create() instead.
            "::create::Chapter::activities": {
              url: urlBase + "/Chapters/:id/activities",
              method: "POST",
            },

            // INTERNAL. Use Chapter.activities.createMany() instead.
            "::createMany::Chapter::activities": {
              isArray: true,
              url: urlBase + "/Chapters/:id/activities",
              method: "POST",
            },

            // INTERNAL. Use Chapter.activities.destroyAll() instead.
            "::delete::Chapter::activities": {
              url: urlBase + "/Chapters/:id/activities",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.activities.count() instead.
            "::count::Chapter::activities": {
              url: urlBase + "/Chapters/:id/activities/count",
              method: "GET",
            },

            // INTERNAL. Use Lesson.activities.findById() instead.
            "::findById::Lesson::activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Lessons/:id/activities/:fk",
              method: "GET",
            },

            // INTERNAL. Use Lesson.activities.destroyById() instead.
            "::destroyById::Lesson::activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Lessons/:id/activities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Lesson.activities.updateById() instead.
            "::updateById::Lesson::activities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Lessons/:id/activities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Lesson.activities() instead.
            "::get::Lesson::activities": {
              isArray: true,
              url: urlBase + "/Lessons/:id/activities",
              method: "GET",
            },

            // INTERNAL. Use Lesson.activities.create() instead.
            "::create::Lesson::activities": {
              url: urlBase + "/Lessons/:id/activities",
              method: "POST",
            },

            // INTERNAL. Use Lesson.activities.createMany() instead.
            "::createMany::Lesson::activities": {
              isArray: true,
              url: urlBase + "/Lessons/:id/activities",
              method: "POST",
            },

            // INTERNAL. Use Lesson.activities.destroyAll() instead.
            "::delete::Lesson::activities": {
              url: urlBase + "/Lessons/:id/activities",
              method: "DELETE",
            },

            // INTERNAL. Use Lesson.activities.count() instead.
            "::count::Lesson::activities": {
              url: urlBase + "/Lessons/:id/activities/count",
              method: "GET",
            },

            // INTERNAL. Use UserRecord.activity() instead.
            "::get::UserRecord::activity": {
              url: urlBase + "/UserRecords/:id/activity",
              method: "GET",
            },

            // INTERNAL. Use UserNote.activity() instead.
            "::get::UserNote::activity": {
              url: urlBase + "/UserNotes/:id/activity",
              method: "GET",
            },

            // INTERNAL. Use Achievement.activity() instead.
            "::get::Achievement::activity": {
              url: urlBase + "/Achievements/:id/activity",
              method: "GET",
            },

            // INTERNAL. Use ActivityProgress.activity() instead.
            "::get::ActivityProgress::activity": {
              url: urlBase + "/ActivityProgresses/:id/activity",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Activity#patchOrCreate
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Activity#updateOrCreate
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Activity#patchOrCreateWithWhere
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Activity#update
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Activity#destroyById
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Activity#removeById
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Activity#patchAttributes
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Activity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Activity#modelName
        * @propertyOf lbServices.Activity
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Activity`.
        */
        R.modelName = "Activity";


            /**
             * @ngdoc method
             * @name lbServices.Activity#chapter
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Fetches belongsTo relation chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Activity id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapter = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::get::Activity::chapter"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Activity#lesson
             * @methodOf lbServices.Activity
             *
             * @description
             *
             * Fetches belongsTo relation lesson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Activity id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R.lesson = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::get::Activity::lesson"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Video
 * @header lbServices.Video
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Video` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Video",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Videos/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Video.chapter() instead.
            "prototype$__get__chapter": {
              url: urlBase + "/Videos/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use Video.curriculum() instead.
            "prototype$__get__curriculum": {
              url: urlBase + "/Videos/:id/curriculum",
              method: "GET",
            },

            // INTERNAL. Use Video.operationHopeUser() instead.
            "prototype$__get__operationHopeUser": {
              url: urlBase + "/Videos/:id/operationHopeUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#create
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Videos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#createMany
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Videos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#upsert
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Videos",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#replaceOrCreate
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Videos/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#upsertWithWhere
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Videos/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#exists
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Videos/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#findById
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Videos/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#replaceById
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Videos/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#find
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Videos",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#findOne
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Videos/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#updateAll
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Videos/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#deleteById
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Videos/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#count
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Videos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#prototype$updateAttributes
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Video id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Videos/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#createChangeStream
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Videos/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#folder
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Manpulate the folder using a action
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `action` – `{string}` -
             *
             *  - `path` – `{string}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `ETag` – `{string=}` -
             */
            "folder": {
              url: urlBase + "/Videos/:id/folder",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#uploadPost
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Creates a hash for uploading a files to the correct video.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `hash` – `{string=}` -
             */
            "uploadPost": {
              url: urlBase + "/Videos/:id/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Video#uploadPut
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Moves the video files to the correct folder using the provided hash.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `hash` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `hash` – `{string=}` -
             */
            "uploadPut": {
              url: urlBase + "/Videos/:id/upload",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.videos.findById() instead.
            "::findById::Chapter::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/videos/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chapter.videos.destroyById() instead.
            "::destroyById::Chapter::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/videos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.videos.updateById() instead.
            "::updateById::Chapter::videos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/videos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.videos() instead.
            "::get::Chapter::videos": {
              isArray: true,
              url: urlBase + "/Chapters/:id/videos",
              method: "GET",
            },

            // INTERNAL. Use Chapter.videos.create() instead.
            "::create::Chapter::videos": {
              url: urlBase + "/Chapters/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use Chapter.videos.createMany() instead.
            "::createMany::Chapter::videos": {
              isArray: true,
              url: urlBase + "/Chapters/:id/videos",
              method: "POST",
            },

            // INTERNAL. Use Chapter.videos.destroyAll() instead.
            "::delete::Chapter::videos": {
              url: urlBase + "/Chapters/:id/videos",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.videos.count() instead.
            "::count::Chapter::videos": {
              url: urlBase + "/Chapters/:id/videos/count",
              method: "GET",
            },

            // INTERNAL. Use UserVideoWatched.video() instead.
            "::get::UserVideoWatched::video": {
              url: urlBase + "/UserVideoWatcheds/:id/video",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Video#patchOrCreate
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Video#updateOrCreate
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Video#patchOrCreateWithWhere
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Video#update
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Video#destroyById
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Video#removeById
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Video#patchAttributes
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Video id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Video#modelName
        * @propertyOf lbServices.Video
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Video`.
        */
        R.modelName = "Video";


            /**
             * @ngdoc method
             * @name lbServices.Video#chapter
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Fetches belongsTo relation chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Video id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapter = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::get::Video::chapter"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Video#curriculum
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Fetches belongsTo relation curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Video id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.curriculum = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::get::Video::curriculum"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Video#operationHopeUser
             * @methodOf lbServices.Video
             *
             * @description
             *
             * Fetches belongsTo relation operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Video id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::get::Video::operationHopeUser"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Assessment
 * @header lbServices.Assessment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Assessment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Assessment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Assessments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Assessment.chapter() instead.
            "prototype$__get__chapter": {
              url: urlBase + "/Assessments/:id/chapter",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#create
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Assessments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#createMany
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Assessments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#upsert
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Assessments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#replaceOrCreate
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Assessments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#upsertWithWhere
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Assessments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#exists
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Assessments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#findById
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Assessments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#replaceById
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Assessments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#find
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Assessments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#findOne
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Assessments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#updateAll
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Assessments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#deleteById
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Assessments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#count
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Assessments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#prototype$updateAttributes
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Assessment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Assessments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#createChangeStream
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Assessments/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#folder
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Manpulate the folder using a action
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `action` – `{string}` -
             *
             *  - `path` – `{string}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `ETag` – `{string=}` -
             */
            "folder": {
              url: urlBase + "/Assessments/:id/folder",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#uploadPost
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Creates a hash for uploading a files to the correct assessment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `hash` – `{string=}` -
             */
            "uploadPost": {
              url: urlBase + "/Assessments/:id/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Assessment#uploadPut
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Moves the assessment files to the correct folder using the provided hash.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `hash` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `hash` – `{string=}` -
             */
            "uploadPut": {
              url: urlBase + "/Assessments/:id/upload",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.assessments.findById() instead.
            "::findById::Chapter::assessments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/assessments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chapter.assessments.destroyById() instead.
            "::destroyById::Chapter::assessments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/assessments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.assessments.updateById() instead.
            "::updateById::Chapter::assessments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/assessments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.assessments() instead.
            "::get::Chapter::assessments": {
              isArray: true,
              url: urlBase + "/Chapters/:id/assessments",
              method: "GET",
            },

            // INTERNAL. Use Chapter.assessments.create() instead.
            "::create::Chapter::assessments": {
              url: urlBase + "/Chapters/:id/assessments",
              method: "POST",
            },

            // INTERNAL. Use Chapter.assessments.createMany() instead.
            "::createMany::Chapter::assessments": {
              isArray: true,
              url: urlBase + "/Chapters/:id/assessments",
              method: "POST",
            },

            // INTERNAL. Use Chapter.assessments.destroyAll() instead.
            "::delete::Chapter::assessments": {
              url: urlBase + "/Chapters/:id/assessments",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.assessments.count() instead.
            "::count::Chapter::assessments": {
              url: urlBase + "/Chapters/:id/assessments/count",
              method: "GET",
            },

            // INTERNAL. Use AssessmentScore.assessment() instead.
            "::get::AssessmentScore::assessment": {
              url: urlBase + "/AssessmentScores/:id/assessment",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Assessment#patchOrCreate
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Assessment#updateOrCreate
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Assessment#patchOrCreateWithWhere
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Assessment#update
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Assessment#destroyById
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Assessment#removeById
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Assessment#patchAttributes
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Assessment id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Assessment#modelName
        * @propertyOf lbServices.Assessment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Assessment`.
        */
        R.modelName = "Assessment";


            /**
             * @ngdoc method
             * @name lbServices.Assessment#chapter
             * @methodOf lbServices.Assessment
             *
             * @description
             *
             * Fetches belongsTo relation chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Assessment id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapter = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::get::Assessment::chapter"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AssessmentScore
 * @header lbServices.AssessmentScore
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AssessmentScore` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AssessmentScore",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/AssessmentScores/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use AssessmentScore.assessment() instead.
            "prototype$__get__assessment": {
              url: urlBase + "/AssessmentScores/:id/assessment",
              method: "GET",
            },

            // INTERNAL. Use AssessmentScore.operationHopeUser() instead.
            "prototype$__get__operationHopeUser": {
              url: urlBase + "/AssessmentScores/:id/operationHopeUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#create
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AssessmentScores",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#createMany
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AssessmentScores",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#upsert
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AssessmentScores",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#replaceOrCreate
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/AssessmentScores/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#upsertWithWhere
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/AssessmentScores/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#exists
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AssessmentScores/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#findById
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AssessmentScores/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#replaceById
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/AssessmentScores/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#find
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AssessmentScores",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#findOne
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AssessmentScores/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#updateAll
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/AssessmentScores/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#deleteById
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AssessmentScores/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#count
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AssessmentScores/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#prototype$updateAttributes
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AssessmentScore id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AssessmentScores/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#createChangeStream
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AssessmentScores/change-stream",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.findById() instead.
            "::findById::OperationHopeUser::assessmentScores": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores/:fk",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.destroyById() instead.
            "::destroyById::OperationHopeUser::assessmentScores": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.updateById() instead.
            "::updateById::OperationHopeUser::assessmentScores": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores() instead.
            "::get::OperationHopeUser::assessmentScores": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.create() instead.
            "::create::OperationHopeUser::assessmentScores": {
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.createMany() instead.
            "::createMany::OperationHopeUser::assessmentScores": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.destroyAll() instead.
            "::delete::OperationHopeUser::assessmentScores": {
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.assessmentScores.count() instead.
            "::count::OperationHopeUser::assessmentScores": {
              url: urlBase + "/OperationHopeUsers/:id/assessmentScores/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#patchOrCreate
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#updateOrCreate
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#patchOrCreateWithWhere
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#update
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#destroyById
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#removeById
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#patchAttributes
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AssessmentScore id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AssessmentScore` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.AssessmentScore#modelName
        * @propertyOf lbServices.AssessmentScore
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AssessmentScore`.
        */
        R.modelName = "AssessmentScore";


            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#assessment
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Fetches belongsTo relation assessment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AssessmentScore id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Assessment` object.)
             * </em>
             */
        R.assessment = function() {
          var TargetResource = $injector.get("Assessment");
          var action = TargetResource["::get::AssessmentScore::assessment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AssessmentScore#operationHopeUser
             * @methodOf lbServices.AssessmentScore
             *
             * @description
             *
             * Fetches belongsTo relation operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AssessmentScore id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::get::AssessmentScore::operationHopeUser"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.UserRecord
 * @header lbServices.UserRecord
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserRecord` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "UserRecord",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/UserRecords/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use UserRecord.operationHopeUser() instead.
            "prototype$__get__operationHopeUser": {
              url: urlBase + "/UserRecords/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use UserRecord.curriculum() instead.
            "prototype$__get__curriculum": {
              url: urlBase + "/UserRecords/:id/curriculum",
              method: "GET",
            },

            // INTERNAL. Use UserRecord.chapter() instead.
            "prototype$__get__chapter": {
              url: urlBase + "/UserRecords/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use UserRecord.lesson() instead.
            "prototype$__get__lesson": {
              url: urlBase + "/UserRecords/:id/lesson",
              method: "GET",
            },

            // INTERNAL. Use UserRecord.activity() instead.
            "prototype$__get__activity": {
              url: urlBase + "/UserRecords/:id/activity",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#create
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/UserRecords",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#createMany
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/UserRecords",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#upsert
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/UserRecords",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#replaceOrCreate
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/UserRecords/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#upsertWithWhere
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/UserRecords/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#exists
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/UserRecords/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#findById
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/UserRecords/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#replaceById
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/UserRecords/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#find
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/UserRecords",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#findOne
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/UserRecords/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#updateAll
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/UserRecords/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#deleteById
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/UserRecords/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#count
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/UserRecords/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#prototype$updateAttributes
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserRecord id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/UserRecords/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#createChangeStream
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/UserRecords/change-stream",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.findById() instead.
            "::findById::OperationHopeUser::userRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userRecords/:fk",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.destroyById() instead.
            "::destroyById::OperationHopeUser::userRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userRecords/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.updateById() instead.
            "::updateById::OperationHopeUser::userRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userRecords/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.userRecords() instead.
            "::get::OperationHopeUser::userRecords": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/userRecords",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.create() instead.
            "::create::OperationHopeUser::userRecords": {
              url: urlBase + "/OperationHopeUsers/:id/userRecords",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.createMany() instead.
            "::createMany::OperationHopeUser::userRecords": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/userRecords",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.destroyAll() instead.
            "::delete::OperationHopeUser::userRecords": {
              url: urlBase + "/OperationHopeUsers/:id/userRecords",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userRecords.count() instead.
            "::count::OperationHopeUser::userRecords": {
              url: urlBase + "/OperationHopeUsers/:id/userRecords/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.UserRecord#patchOrCreate
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#updateOrCreate
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#patchOrCreateWithWhere
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#update
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#destroyById
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#removeById
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#patchAttributes
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserRecord id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserRecord` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.UserRecord#modelName
        * @propertyOf lbServices.UserRecord
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserRecord`.
        */
        R.modelName = "UserRecord";


            /**
             * @ngdoc method
             * @name lbServices.UserRecord#operationHopeUser
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Fetches belongsTo relation operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserRecord id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::get::UserRecord::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#curriculum
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Fetches belongsTo relation curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserRecord id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.curriculum = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::get::UserRecord::curriculum"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#chapter
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Fetches belongsTo relation chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserRecord id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapter = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::get::UserRecord::chapter"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#lesson
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Fetches belongsTo relation lesson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserRecord id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R.lesson = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::get::UserRecord::lesson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.UserRecord#activity
             * @methodOf lbServices.UserRecord
             *
             * @description
             *
             * Fetches belongsTo relation activity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserRecord id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activity = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::get::UserRecord::activity"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.UserNote
 * @header lbServices.UserNote
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserNote` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "UserNote",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/UserNotes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use UserNote.operationHopeUser() instead.
            "prototype$__get__operationHopeUser": {
              url: urlBase + "/UserNotes/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use UserNote.curriculum() instead.
            "prototype$__get__curriculum": {
              url: urlBase + "/UserNotes/:id/curriculum",
              method: "GET",
            },

            // INTERNAL. Use UserNote.chapter() instead.
            "prototype$__get__chapter": {
              url: urlBase + "/UserNotes/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use UserNote.lesson() instead.
            "prototype$__get__lesson": {
              url: urlBase + "/UserNotes/:id/lesson",
              method: "GET",
            },

            // INTERNAL. Use UserNote.activity() instead.
            "prototype$__get__activity": {
              url: urlBase + "/UserNotes/:id/activity",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#create
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/UserNotes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#createMany
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/UserNotes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#upsert
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/UserNotes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#replaceOrCreate
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/UserNotes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#upsertWithWhere
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/UserNotes/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#exists
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/UserNotes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#findById
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/UserNotes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#replaceById
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/UserNotes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#find
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/UserNotes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#findOne
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/UserNotes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#updateAll
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/UserNotes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#deleteById
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/UserNotes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#count
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/UserNotes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#prototype$updateAttributes
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserNote id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/UserNotes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserNote#createChangeStream
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/UserNotes/change-stream",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.findById() instead.
            "::findById::OperationHopeUser::userNotes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userNotes/:fk",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.destroyById() instead.
            "::destroyById::OperationHopeUser::userNotes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userNotes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.updateById() instead.
            "::updateById::OperationHopeUser::userNotes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userNotes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.userNotes() instead.
            "::get::OperationHopeUser::userNotes": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/userNotes",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.create() instead.
            "::create::OperationHopeUser::userNotes": {
              url: urlBase + "/OperationHopeUsers/:id/userNotes",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.createMany() instead.
            "::createMany::OperationHopeUser::userNotes": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/userNotes",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.destroyAll() instead.
            "::delete::OperationHopeUser::userNotes": {
              url: urlBase + "/OperationHopeUsers/:id/userNotes",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userNotes.count() instead.
            "::count::OperationHopeUser::userNotes": {
              url: urlBase + "/OperationHopeUsers/:id/userNotes/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.UserNote#patchOrCreate
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserNote#updateOrCreate
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserNote#patchOrCreateWithWhere
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.UserNote#update
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserNote#destroyById
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserNote#removeById
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserNote#patchAttributes
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserNote id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserNote` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.UserNote#modelName
        * @propertyOf lbServices.UserNote
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserNote`.
        */
        R.modelName = "UserNote";


            /**
             * @ngdoc method
             * @name lbServices.UserNote#operationHopeUser
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Fetches belongsTo relation operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserNote id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::get::UserNote::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.UserNote#curriculum
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Fetches belongsTo relation curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserNote id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.curriculum = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::get::UserNote::curriculum"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.UserNote#chapter
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Fetches belongsTo relation chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserNote id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapter = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::get::UserNote::chapter"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.UserNote#lesson
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Fetches belongsTo relation lesson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserNote id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R.lesson = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::get::UserNote::lesson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.UserNote#activity
             * @methodOf lbServices.UserNote
             *
             * @description
             *
             * Fetches belongsTo relation activity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserNote id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activity = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::get::UserNote::activity"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Deliverable
 * @header lbServices.Deliverable
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Deliverable` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Deliverable",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Deliverables/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Deliverable.curriculum() instead.
            "prototype$__get__curriculum": {
              url: urlBase + "/Deliverables/:id/curriculum",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#create
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Deliverables",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#createMany
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Deliverables",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#upsert
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Deliverables",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#replaceOrCreate
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Deliverables/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#upsertWithWhere
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Deliverables/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#exists
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Deliverables/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#findById
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Deliverables/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#replaceById
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Deliverables/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#find
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Deliverables",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#findOne
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Deliverables/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#updateAll
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Deliverables/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#deleteById
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Deliverables/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#count
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Deliverables/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#prototype$updateAttributes
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Deliverable id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Deliverables/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#createChangeStream
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Deliverables/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.certificate() instead.
            "::get::Curriculum::certificate": {
              url: urlBase + "/Curriculums/:id/certificate",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.certificate.create() instead.
            "::create::Curriculum::certificate": {
              url: urlBase + "/Curriculums/:id/certificate",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.certificate.createMany() instead.
            "::createMany::Curriculum::certificate": {
              isArray: true,
              url: urlBase + "/Curriculums/:id/certificate",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.certificate.update() instead.
            "::update::Curriculum::certificate": {
              url: urlBase + "/Curriculums/:id/certificate",
              method: "PUT",
            },

            // INTERNAL. Use Curriculum.certificate.destroy() instead.
            "::destroy::Curriculum::certificate": {
              url: urlBase + "/Curriculums/:id/certificate",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.deliverables.findById() instead.
            "::findById::Curriculum::deliverables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/deliverables/:fk",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.deliverables.destroyById() instead.
            "::destroyById::Curriculum::deliverables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/deliverables/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.deliverables.updateById() instead.
            "::updateById::Curriculum::deliverables": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/deliverables/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Curriculum.deliverables() instead.
            "::get::Curriculum::deliverables": {
              isArray: true,
              url: urlBase + "/Curriculums/:id/deliverables",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.deliverables.create() instead.
            "::create::Curriculum::deliverables": {
              url: urlBase + "/Curriculums/:id/deliverables",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.deliverables.createMany() instead.
            "::createMany::Curriculum::deliverables": {
              isArray: true,
              url: urlBase + "/Curriculums/:id/deliverables",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.deliverables.destroyAll() instead.
            "::delete::Curriculum::deliverables": {
              url: urlBase + "/Curriculums/:id/deliverables",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.deliverables.count() instead.
            "::count::Curriculum::deliverables": {
              url: urlBase + "/Curriculums/:id/deliverables/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Deliverable#patchOrCreate
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#updateOrCreate
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#patchOrCreateWithWhere
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#update
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#destroyById
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#removeById
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Deliverable#patchAttributes
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Deliverable id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Deliverable` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Deliverable#modelName
        * @propertyOf lbServices.Deliverable
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Deliverable`.
        */
        R.modelName = "Deliverable";


            /**
             * @ngdoc method
             * @name lbServices.Deliverable#curriculum
             * @methodOf lbServices.Deliverable
             *
             * @description
             *
             * Fetches belongsTo relation curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Deliverable id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.curriculum = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::get::Deliverable::curriculum"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Achievement
 * @header lbServices.Achievement
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Achievement` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Achievement",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Achievements/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Achievement.chapter() instead.
            "prototype$__get__chapter": {
              url: urlBase + "/Achievements/:id/chapter",
              method: "GET",
            },

            // INTERNAL. Use Achievement.lesson() instead.
            "prototype$__get__lesson": {
              url: urlBase + "/Achievements/:id/lesson",
              method: "GET",
            },

            // INTERNAL. Use Achievement.activity() instead.
            "prototype$__get__activity": {
              url: urlBase + "/Achievements/:id/activity",
              method: "GET",
            },

            // INTERNAL. Use Achievement.operationHopeUser.findById() instead.
            "prototype$__findById__operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/:fk",
              method: "GET",
            },

            // INTERNAL. Use Achievement.operationHopeUser.destroyById() instead.
            "prototype$__destroyById__operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Achievement.operationHopeUser.updateById() instead.
            "prototype$__updateById__operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Achievement.operationHopeUser.link() instead.
            "prototype$__link__operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Achievement.operationHopeUser.unlink() instead.
            "prototype$__unlink__operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Achievement.operationHopeUser.exists() instead.
            "prototype$__exists__operationHopeUser": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Achievements/:id/operationHopeUser/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Achievement.operationHopeUser() instead.
            "prototype$__get__operationHopeUser": {
              isArray: true,
              url: urlBase + "/Achievements/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use Achievement.operationHopeUser.create() instead.
            "prototype$__create__operationHopeUser": {
              url: urlBase + "/Achievements/:id/operationHopeUser",
              method: "POST",
            },

            // INTERNAL. Use Achievement.operationHopeUser.destroyAll() instead.
            "prototype$__delete__operationHopeUser": {
              url: urlBase + "/Achievements/:id/operationHopeUser",
              method: "DELETE",
            },

            // INTERNAL. Use Achievement.operationHopeUser.count() instead.
            "prototype$__count__operationHopeUser": {
              url: urlBase + "/Achievements/:id/operationHopeUser/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#create
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Achievements",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#createMany
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Achievements",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#upsert
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Achievements",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#replaceOrCreate
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Achievements/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#upsertWithWhere
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Achievements/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#exists
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Achievements/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#findById
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Achievements/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#replaceById
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Achievements/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#find
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Achievements",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#findOne
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Achievements/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#updateAll
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Achievements/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#deleteById
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Achievements/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#count
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Achievements/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#prototype$updateAttributes
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Achievements/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#createChangeStream
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Achievements/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Achievement#getTypes
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * returns a list of all the Achievement types.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `req` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `types` – `{json=}` -
             */
            "getTypes": {
              url: urlBase + "/Achievements/types",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.achievements.link() instead.
            "::link::OperationHopeUser::achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/achievements/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.achievements.unlink() instead.
            "::unlink::OperationHopeUser::achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/achievements/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.achievements.exists() instead.
            "::exists::OperationHopeUser::achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/achievements/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use OperationHopeUser.achievements() instead.
            "::get::OperationHopeUser::achievements": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/achievements",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.achievements.count() instead.
            "::count::OperationHopeUser::achievements": {
              url: urlBase + "/OperationHopeUsers/:id/achievements/count",
              method: "GET",
            },

            // INTERNAL. Use Chapter.achievements.findById() instead.
            "::findById::Chapter::achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/achievements/:fk",
              method: "GET",
            },

            // INTERNAL. Use Chapter.achievements.destroyById() instead.
            "::destroyById::Chapter::achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/achievements/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.achievements.updateById() instead.
            "::updateById::Chapter::achievements": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Chapters/:id/achievements/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Chapter.achievements() instead.
            "::get::Chapter::achievements": {
              isArray: true,
              url: urlBase + "/Chapters/:id/achievements",
              method: "GET",
            },

            // INTERNAL. Use Chapter.achievements.create() instead.
            "::create::Chapter::achievements": {
              url: urlBase + "/Chapters/:id/achievements",
              method: "POST",
            },

            // INTERNAL. Use Chapter.achievements.createMany() instead.
            "::createMany::Chapter::achievements": {
              isArray: true,
              url: urlBase + "/Chapters/:id/achievements",
              method: "POST",
            },

            // INTERNAL. Use Chapter.achievements.destroyAll() instead.
            "::delete::Chapter::achievements": {
              url: urlBase + "/Chapters/:id/achievements",
              method: "DELETE",
            },

            // INTERNAL. Use Chapter.achievements.count() instead.
            "::count::Chapter::achievements": {
              url: urlBase + "/Chapters/:id/achievements/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Achievement#patchOrCreate
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Achievement#updateOrCreate
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Achievement#patchOrCreateWithWhere
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Achievement#update
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Achievement#destroyById
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Achievement#removeById
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Achievement#patchAttributes
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Achievement` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Achievement#modelName
        * @propertyOf lbServices.Achievement
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Achievement`.
        */
        R.modelName = "Achievement";


            /**
             * @ngdoc method
             * @name lbServices.Achievement#chapter
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Fetches belongsTo relation chapter.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Chapter` object.)
             * </em>
             */
        R.chapter = function() {
          var TargetResource = $injector.get("Chapter");
          var action = TargetResource["::get::Achievement::chapter"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement#lesson
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Fetches belongsTo relation lesson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R.lesson = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::get::Achievement::lesson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement#activity
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Fetches belongsTo relation activity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activity = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::get::Achievement::activity"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Achievement.operationHopeUser
     * @header lbServices.Achievement.operationHopeUser
     * @object
     * @description
     *
     * The object `Achievement.operationHopeUser` groups methods
     * manipulating `OperationHopeUser` instances related to `Achievement`.
     *
     * Call {@link lbServices.Achievement#operationHopeUser Achievement.operationHopeUser()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Achievement#operationHopeUser
             * @methodOf lbServices.Achievement
             *
             * @description
             *
             * Queries operationHopeUser of Achievement.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::get::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement.operationHopeUser#count
             * @methodOf lbServices.Achievement.operationHopeUser
             *
             * @description
             *
             * Counts operationHopeUser of Achievement.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.operationHopeUser.count = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::count::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement.operationHopeUser#create
             * @methodOf lbServices.Achievement.operationHopeUser
             *
             * @description
             *
             * Creates a new instance in operationHopeUser of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser.create = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::create::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement.operationHopeUser#createMany
             * @methodOf lbServices.Achievement.operationHopeUser
             *
             * @description
             *
             * Creates a new instance in operationHopeUser of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser.createMany = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::createMany::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement.operationHopeUser#destroyAll
             * @methodOf lbServices.Achievement.operationHopeUser
             *
             * @description
             *
             * Deletes all operationHopeUser of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.operationHopeUser.destroyAll = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::delete::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement.operationHopeUser#destroyById
             * @methodOf lbServices.Achievement.operationHopeUser
             *
             * @description
             *
             * Delete a related item by id for operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `fk` – `{*}` - Foreign key for operationHopeUser
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.operationHopeUser.destroyById = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::destroyById::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement.operationHopeUser#exists
             * @methodOf lbServices.Achievement.operationHopeUser
             *
             * @description
             *
             * Check the existence of operationHopeUser relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `fk` – `{*}` - Foreign key for operationHopeUser
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser.exists = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::exists::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement.operationHopeUser#findById
             * @methodOf lbServices.Achievement.operationHopeUser
             *
             * @description
             *
             * Find a related item by id for operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `fk` – `{*}` - Foreign key for operationHopeUser
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser.findById = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::findById::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement.operationHopeUser#link
             * @methodOf lbServices.Achievement.operationHopeUser
             *
             * @description
             *
             * Add a related item by id for operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `fk` – `{*}` - Foreign key for operationHopeUser
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser.link = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::link::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement.operationHopeUser#unlink
             * @methodOf lbServices.Achievement.operationHopeUser
             *
             * @description
             *
             * Remove the operationHopeUser relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `fk` – `{*}` - Foreign key for operationHopeUser
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.operationHopeUser.unlink = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::unlink::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Achievement.operationHopeUser#updateById
             * @methodOf lbServices.Achievement.operationHopeUser
             *
             * @description
             *
             * Update a related item by id for operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Achievement id
             *
             *  - `fk` – `{*}` - Foreign key for operationHopeUser
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser.updateById = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::updateById::Achievement::operationHopeUser"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.WorkerQueue
 * @header lbServices.WorkerQueue
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `WorkerQueue` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "WorkerQueue",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/WorkerQueues/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#create
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/WorkerQueues",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#createMany
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/WorkerQueues",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#upsert
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/WorkerQueues",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#replaceOrCreate
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/WorkerQueues/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#upsertWithWhere
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/WorkerQueues/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#exists
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/WorkerQueues/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#findById
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/WorkerQueues/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#replaceById
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/WorkerQueues/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#find
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/WorkerQueues",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#findOne
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/WorkerQueues/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#updateAll
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/WorkerQueues/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#deleteById
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/WorkerQueues/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#count
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/WorkerQueues/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#prototype$updateAttributes
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkerQueue id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/WorkerQueues/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#createChangeStream
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/WorkerQueues/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#patchOrCreate
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#updateOrCreate
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#patchOrCreateWithWhere
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#update
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#destroyById
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#removeById
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.WorkerQueue#patchAttributes
             * @methodOf lbServices.WorkerQueue
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - WorkerQueue id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkerQueue` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.WorkerQueue#modelName
        * @propertyOf lbServices.WorkerQueue
        * @description
        * The name of the model represented by this $resource,
        * i.e. `WorkerQueue`.
        */
        R.modelName = "WorkerQueue";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LessonProgress
 * @header lbServices.LessonProgress
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LessonProgress` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LessonProgress",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/LessonProgresses/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use LessonProgress.lesson() instead.
            "prototype$__get__lesson": {
              url: urlBase + "/LessonProgresses/:id/lesson",
              method: "GET",
            },

            // INTERNAL. Use LessonProgress.operationHopeUser() instead.
            "prototype$__get__operationHopeUser": {
              url: urlBase + "/LessonProgresses/:id/operationHopeUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#create
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LessonProgresses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#createMany
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LessonProgresses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#upsert
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/LessonProgresses",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#replaceOrCreate
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/LessonProgresses/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#upsertWithWhere
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/LessonProgresses/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#exists
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LessonProgresses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#findById
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LessonProgresses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#replaceById
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/LessonProgresses/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#find
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LessonProgresses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#findOne
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LessonProgresses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#updateAll
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/LessonProgresses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#deleteById
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LessonProgresses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#count
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LessonProgresses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#prototype$updateAttributes
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LessonProgress id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/LessonProgresses/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#createChangeStream
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LessonProgresses/change-stream",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress.destroyById() instead.
            "::destroyById::OperationHopeUser::lessonsProgress": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress.updateById() instead.
            "::updateById::OperationHopeUser::lessonsProgress": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress() instead.
            "::get::OperationHopeUser::lessonsProgress": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress.create() instead.
            "::create::OperationHopeUser::lessonsProgress": {
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress.createMany() instead.
            "::createMany::OperationHopeUser::lessonsProgress": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.lessonsProgress.count() instead.
            "::count::OperationHopeUser::lessonsProgress": {
              url: urlBase + "/OperationHopeUsers/:id/lessonsProgress/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#patchOrCreate
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#updateOrCreate
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#patchOrCreateWithWhere
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#update
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#destroyById
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#removeById
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#patchAttributes
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LessonProgress id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LessonProgress` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.LessonProgress#modelName
        * @propertyOf lbServices.LessonProgress
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LessonProgress`.
        */
        R.modelName = "LessonProgress";


            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#lesson
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Fetches belongsTo relation lesson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LessonProgress id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Lesson` object.)
             * </em>
             */
        R.lesson = function() {
          var TargetResource = $injector.get("Lesson");
          var action = TargetResource["::get::LessonProgress::lesson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LessonProgress#operationHopeUser
             * @methodOf lbServices.LessonProgress
             *
             * @description
             *
             * Fetches belongsTo relation operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LessonProgress id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::get::LessonProgress::operationHopeUser"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ActivityProgress
 * @header lbServices.ActivityProgress
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ActivityProgress` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ActivityProgress",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ActivityProgresses/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ActivityProgress.activity() instead.
            "prototype$__get__activity": {
              url: urlBase + "/ActivityProgresses/:id/activity",
              method: "GET",
            },

            // INTERNAL. Use ActivityProgress.operationHopeUser() instead.
            "prototype$__get__operationHopeUser": {
              url: urlBase + "/ActivityProgresses/:id/operationHopeUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#create
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ActivityProgresses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#createMany
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ActivityProgresses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#upsert
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ActivityProgresses",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#replaceOrCreate
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ActivityProgresses/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#upsertWithWhere
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ActivityProgresses/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#exists
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ActivityProgresses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#findById
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ActivityProgresses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#replaceById
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ActivityProgresses/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#find
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ActivityProgresses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#findOne
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ActivityProgresses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#updateAll
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ActivityProgresses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#deleteById
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ActivityProgresses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#count
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ActivityProgresses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#prototype$updateAttributes
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ActivityProgress id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ActivityProgresses/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#createChangeStream
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ActivityProgresses/change-stream",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress.destroyById() instead.
            "::destroyById::OperationHopeUser::activitiesProgress": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress.updateById() instead.
            "::updateById::OperationHopeUser::activitiesProgress": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress() instead.
            "::get::OperationHopeUser::activitiesProgress": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress.create() instead.
            "::create::OperationHopeUser::activitiesProgress": {
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress.createMany() instead.
            "::createMany::OperationHopeUser::activitiesProgress": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.activitiesProgress.count() instead.
            "::count::OperationHopeUser::activitiesProgress": {
              url: urlBase + "/OperationHopeUsers/:id/activitiesProgress/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#patchOrCreate
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#updateOrCreate
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#patchOrCreateWithWhere
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#update
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#destroyById
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#removeById
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#patchAttributes
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ActivityProgress id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivityProgress` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ActivityProgress#modelName
        * @propertyOf lbServices.ActivityProgress
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ActivityProgress`.
        */
        R.modelName = "ActivityProgress";


            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#activity
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Fetches belongsTo relation activity.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ActivityProgress id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Activity` object.)
             * </em>
             */
        R.activity = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::get::ActivityProgress::activity"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ActivityProgress#operationHopeUser
             * @methodOf lbServices.ActivityProgress
             *
             * @description
             *
             * Fetches belongsTo relation operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ActivityProgress id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::get::ActivityProgress::operationHopeUser"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Upload
 * @header lbServices.Upload
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Upload` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Upload",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Uploads/:id",
          { 'id': '@id' },
          {
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Upload#modelName
        * @propertyOf lbServices.Upload
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Upload`.
        */
        R.modelName = "Upload";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.UserVideoWatched
 * @header lbServices.UserVideoWatched
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserVideoWatched` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "UserVideoWatched",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/UserVideoWatcheds/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use UserVideoWatched.operationHopeUser() instead.
            "prototype$__get__operationHopeUser": {
              url: urlBase + "/UserVideoWatcheds/:id/operationHopeUser",
              method: "GET",
            },

            // INTERNAL. Use UserVideoWatched.video() instead.
            "prototype$__get__video": {
              url: urlBase + "/UserVideoWatcheds/:id/video",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#create
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/UserVideoWatcheds",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#createMany
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/UserVideoWatcheds",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#upsert
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/UserVideoWatcheds",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#replaceOrCreate
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/UserVideoWatcheds/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#upsertWithWhere
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/UserVideoWatcheds/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#exists
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/UserVideoWatcheds/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#findById
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/UserVideoWatcheds/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#replaceById
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/UserVideoWatcheds/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#find
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/UserVideoWatcheds",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#findOne
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/UserVideoWatcheds/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#updateAll
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/UserVideoWatcheds/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#deleteById
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/UserVideoWatcheds/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#count
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/UserVideoWatcheds/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#prototype$updateAttributes
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserVideoWatched id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/UserVideoWatcheds/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#createChangeStream
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/UserVideoWatcheds/change-stream",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.findById() instead.
            "::findById::OperationHopeUser::userVideosWatched": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched/:fk",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.destroyById() instead.
            "::destroyById::OperationHopeUser::userVideosWatched": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.updateById() instead.
            "::updateById::OperationHopeUser::userVideosWatched": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched/:fk",
              method: "PUT",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched() instead.
            "::get::OperationHopeUser::userVideosWatched": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched",
              method: "GET",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.create() instead.
            "::create::OperationHopeUser::userVideosWatched": {
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.createMany() instead.
            "::createMany::OperationHopeUser::userVideosWatched": {
              isArray: true,
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched",
              method: "POST",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.destroyAll() instead.
            "::delete::OperationHopeUser::userVideosWatched": {
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched",
              method: "DELETE",
            },

            // INTERNAL. Use OperationHopeUser.userVideosWatched.count() instead.
            "::count::OperationHopeUser::userVideosWatched": {
              url: urlBase + "/OperationHopeUsers/:id/userVideosWatched/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#patchOrCreate
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#updateOrCreate
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#patchOrCreateWithWhere
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#update
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#destroyById
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#removeById
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#patchAttributes
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserVideoWatched id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserVideoWatched` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.UserVideoWatched#modelName
        * @propertyOf lbServices.UserVideoWatched
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserVideoWatched`.
        */
        R.modelName = "UserVideoWatched";


            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#operationHopeUser
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Fetches belongsTo relation operationHopeUser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserVideoWatched id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `OperationHopeUser` object.)
             * </em>
             */
        R.operationHopeUser = function() {
          var TargetResource = $injector.get("OperationHopeUser");
          var action = TargetResource["::get::UserVideoWatched::operationHopeUser"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.UserVideoWatched#video
             * @methodOf lbServices.UserVideoWatched
             *
             * @description
             *
             * Fetches belongsTo relation video.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserVideoWatched id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Video` object.)
             * </em>
             */
        R.video = function() {
          var TargetResource = $injector.get("Video");
          var action = TargetResource["::get::UserVideoWatched::video"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.HeroImage
 * @header lbServices.HeroImage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `HeroImage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "HeroImage",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/HeroImages/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use HeroImage.curriculum() instead.
            "prototype$__get__curriculum": {
              url: urlBase + "/HeroImages/:id/curriculum",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#create
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/HeroImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#createMany
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/HeroImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#upsert
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/HeroImages",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#replaceOrCreate
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/HeroImages/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#upsertWithWhere
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/HeroImages/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#exists
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/HeroImages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#findById
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/HeroImages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#replaceById
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/HeroImages/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#find
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/HeroImages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#findOne
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/HeroImages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#updateAll
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/HeroImages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#deleteById
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/HeroImages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#count
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/HeroImages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#prototype$updateAttributes
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - HeroImage id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/HeroImages/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#createChangeStream
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/HeroImages/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#upload
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Uploads a image and places it within the correct location
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{number}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
            "upload": {
              url: urlBase + "/HeroImages/:id/upload",
              method: "PUT",
            },

            // INTERNAL. Use Curriculum.heroImages.findById() instead.
            "::findById::Curriculum::heroImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/heroImages/:fk",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.heroImages.destroyById() instead.
            "::destroyById::Curriculum::heroImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/heroImages/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.heroImages.updateById() instead.
            "::updateById::Curriculum::heroImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Curriculums/:id/heroImages/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Curriculum.heroImages() instead.
            "::get::Curriculum::heroImages": {
              isArray: true,
              url: urlBase + "/Curriculums/:id/heroImages",
              method: "GET",
            },

            // INTERNAL. Use Curriculum.heroImages.create() instead.
            "::create::Curriculum::heroImages": {
              url: urlBase + "/Curriculums/:id/heroImages",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.heroImages.createMany() instead.
            "::createMany::Curriculum::heroImages": {
              isArray: true,
              url: urlBase + "/Curriculums/:id/heroImages",
              method: "POST",
            },

            // INTERNAL. Use Curriculum.heroImages.destroyAll() instead.
            "::delete::Curriculum::heroImages": {
              url: urlBase + "/Curriculums/:id/heroImages",
              method: "DELETE",
            },

            // INTERNAL. Use Curriculum.heroImages.count() instead.
            "::count::Curriculum::heroImages": {
              url: urlBase + "/Curriculums/:id/heroImages/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.HeroImage#patchOrCreate
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#updateOrCreate
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#patchOrCreateWithWhere
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#update
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#destroyById
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#removeById
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.HeroImage#patchAttributes
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - HeroImage id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HeroImage` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.HeroImage#modelName
        * @propertyOf lbServices.HeroImage
        * @description
        * The name of the model represented by this $resource,
        * i.e. `HeroImage`.
        */
        R.modelName = "HeroImage";


            /**
             * @ngdoc method
             * @name lbServices.HeroImage#curriculum
             * @methodOf lbServices.HeroImage
             *
             * @description
             *
             * Fetches belongsTo relation curriculum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - HeroImage id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Curriculum` object.)
             * </em>
             */
        R.curriculum = function() {
          var TargetResource = $injector.get("Curriculum");
          var action = TargetResource["::get::HeroImage::curriculum"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Vimeo
 * @header lbServices.Vimeo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Vimeo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Vimeo",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Vimeo/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Vimeo#verify
             * @methodOf lbServices.Vimeo
             *
             * @description
             *
             * Verify that personal access token is valid. You shouldn't need this.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Vimeo` object.)
             * </em>
             */
            "verify": {
              url: urlBase + "/Vimeo/verify",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Vimeo#accessToken
             * @methodOf lbServices.Vimeo
             *
             * @description
             *
             * Returns Vimeo access token
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Vimeo` object.)
             * </em>
             */
            "accessToken": {
              url: urlBase + "/Vimeo/accessToken",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Vimeo#upload
             * @methodOf lbServices.Vimeo
             *
             * @description
             *
             * Uploads video to Vimeo from an AWS URL
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `awsUrl` – `{string}` - The AWS url of the video asset
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Vimeo` object.)
             * </em>
             */
            "upload": {
              url: urlBase + "/Vimeo/upload/:awsUrl",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Vimeo#pendingUploads
             * @methodOf lbServices.Vimeo
             *
             * @description
             *
             * Uploads video to Vimeo from an AWS URL
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Vimeo` object.)
             * </em>
             */
            "pendingUploads": {
              url: urlBase + "/Vimeo/videos/pending",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Vimeo#modelName
        * @propertyOf lbServices.Vimeo
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Vimeo`.
        */
        R.modelName = "Vimeo";



        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
